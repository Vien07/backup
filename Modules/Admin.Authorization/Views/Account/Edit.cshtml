@using static Admin.Authorization.Constants.StaticPath;
@using Admin.Authorization.Constants;
@using ComponentUILibrary.Models
@using Steam.Core.Base.Constant

@model Admin.Authorization.Controllers.AccountEditPageModel
@{
    ViewData["PageTitle"] = Model.PageTitle.ModuleName;

}
@*@await Component.InvokeAsync(nameof(ComponentUILibrary.ViewComponents.PageTitleComponent), new { model = Model.PageTitle })*@
<style type="text/css">
    .card .card-body{
        padding:0 !important;
    }
    .card{
        margin-bottom: unset !important;
    }
</style>
<section class="section">
    <div class="row" id="">
        <div class="col-12">
            <div class="card">
                @*
                    <div class="card-header">
                    </div>*@
                <div class="card-content p-lg-2 pr-2">
                    <form id="uploadForm" class="mt-2">

                        <div class="mt-2">
                            <input hidden id="Pid" class="pid" name="Pid" value="@Model.UserModel.Detail.Pid">
                            <div class="form-group">
                                <label for="UserName">Tên đăng nhập</label>
                                <input required type="text" class="form-control" id="UserName" value="@Model.UserModel.Detail.UserName" name="UserName" aria-describedby="UserName" placeholder="nhập tên đăng nhập...">
                            </div>
                            @if (Model.UserModel.Detail.Pid == 0)
                            {
                                <div class="form-group">
                                    <label for="Password">Mật khẩu</label>
                                    <input required type="text" class="form-control" id="Password" value="@Model.UserModel.Detail.Password" name="Password" aria-describedby="Password" placeholder="nhập mật khẩu...">
                                </div>
                            }

                            <div class="form-group">
                                <label for="Name">Họ Tên</label>
                                <input type="text" class="form-control" id="Name" value="@Model.UserModel.Detail.Name" name="Name" aria-describedby="Name" placeholder="nhập họ tên...">
                            </div>

                            <div class="form-group">
                                <label for="">Hình ảnh</label>

                                @{


                                    List<string> listFile = new List<string>();
                                    if (!String.IsNullOrEmpty(Model.UserModel.Detail.Image))
                                    {
                                        listFile.Add("/FileStorage/Storage/" + Asset.Image + Model.UserModel.Detail.Image);

                                    }
                                    FileUploadControlModel fileUploadModel = new FileUploadControlModel();
                                    fileUploadModel.Id = "Images";
                                    fileUploadModel.Class = "";
                                    fileUploadModel.FirstLoadLib = true;//true thì tạo control up nhiều ảnh
                                    fileUploadModel.SelectedFiles = fileUploadModel.GenerateFileJson(listFile);

                                }
                                @await Component.InvokeAsync(nameof(ComponentUILibrary.ViewComponents.FileUploadFilePondComponent), fileUploadModel)
                            </div>
                            <div class="form-group row ml-2 col-xl-12 col-sm-12">
                                <style>
                                    .sample-nice-select {
                                        margin-left: 5px
                                    }
                                </style>
                                <label for="">Chọn quyền</label>
                                @{
                                    if (Model.ListGroupRole.Any())
                                    {
                                        List<SelectControlData> listSelect = new List<SelectControlData>();
                                        foreach (var item in Model.ListGroupRole)
                                        {
                                            listSelect.Add(new SelectControlData { Name = item.Name, Value = item.Pid.ToString() });
                                        }
                                        NiceSelectModel selectModel2 = new NiceSelectModel();
                                        selectModel2.Data = listSelect;
                                        selectModel2.Id = "GroupRoleID";
                                        selectModel2.Size = "large";
                                        selectModel2.Class = "nice-select sample-nice-select";

                                        if (Model.ListGroupPermission.Any())
                                        {
                                            selectModel2.SelectedValue = Model.ListGroupPermission.FirstOrDefault().ToString();
                                        }

                                        @await Component.InvokeAsync(nameof(ComponentUILibrary.ViewComponents.NiceSelectComponent), new { model = selectModel2 })
                                    }
                                    else
                                    {
                                        <h5>chưa có nhóm quyền trong dữ liệu!</h5>
                                    }
                                }
                            </div>

                        </div>
                    </form>
                    <div class="modal-footer mt-2">
                        <div class="demo-inline-spacing">
                            @if (Model.UserModel.Detail.Pid != 0)
                            {
                                <button type="button" onclick="_action.ResetPassword(@Model.UserModel.Detail.Pid)" class="btn btn-danger">Reset Password</button>
                            }
                            <button onclick="_action.Save('uploadForm')" type="button" class="btn rounded-pill btn-primary">
                                <span class="tf-icons bx bx-save me-1"></span>Lưu
                            </button>
                            <a type="button" href="@Admin.Authorization.Constants.Config.Route.AccountPageIndex" class="btn rounded-pill btn-secondary">
                                <span class="tf-icons bx bx-x me-1"></span>Đóng
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @Html.AntiForgeryToken()

</section>

@section Scripts{
    <script asp-append-version="true" src="@(Admin.Authorization.Constants.ModuleInfo.PathCommand)/Account/edit.js"></script>
    @*<script asp-append-version="true" src="@(Admin.Authorization.Constants.ModuleInfo.PathCommand)/Authorization/edit.js"></script>*@

    <script>
        const ModelView = {
            RouteIndex: "@Admin.Authorization.Constants.Config.Route.AccountPageIndex",
            DivModalDataID: "divModalInfo",
            ModalDataID: "ModelData",
            DivModalConfigID: "divModalConfig",
            ModalConfigID: "ModelConfig",
            FromUploadID: "uploadForm",
            NavPagingID: "navigation_paging",
            FileUploadID: "Images"
        }
        let _action = new AdminAccount_Edit(ModelView);
        _action.CheckFunction();
        //var dragger
        function OpenSettingModal() {
            $("#myModal2").modal("show")
        }
        function CloseSettingModal() {
            $("#myModal2").modal("hide")
        }
        function ChangeFilter() {
            $("#sort-amount").html('<i  class="fas fa-sort-amount-down-alt"></i>')

        }

    </script>
}