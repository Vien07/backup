@using DTO;
@using CMS.Services.TranslateServices;
@inject ITranslateServices _translate
@{
    ViewData["Title"] = "Index";
    Layout = "~/Areas/Shared/Views/_Layout.cshtml";
}


<!-- Container -->
<div class="container-fluid px-lg-4">
    <!-- Title -->
    <div class="hk-pg-header pt-20">
        <h5 class="hk-pg-title text-light text-uppercase"><span class="pg-title-icon"><i class="fas fa-layer-group"></i></span>@_translate.GetStringAdmin("left-menu.about")</h5>
    </div>
    <!-- /Title -->
    <!-- Row -->
    <div class="row">
        <div id="list" class="col-xl-12">
            <section class="hk-sec-wrapper">
                @*<p class="mb-20">
                    @_translate.GetStringAdmin("table-desc.about")
                </p>*@
                <div class="form-inline align-items-center">
                    <div class="col-auto form-group pl-0 pr-2 mb-3">
                        <select onchange="Search()" id="selectActive" class="form-control select2 form-control-sm">
                            <option value="" selected>—@_translate.GetStringAdmin("group.select-all")</option>
                            <option value="1">@_translate.GetStringAdmin("group.select-active")</option>
                            <option value="0">@_translate.GetStringAdmin("group.select-inactive")</option>
                        </select>
                    </div>

                    @*<div class="col-auto form-group px-2 mb-3">
                            <select onchange="Search()" id="selectCate" class="form-control form-control-sm nice-select">
                            </select>
                        </div>*@
                    <div class="col-auto form-group px-2 mb-3 ">
                        <input type="search" id="key" class="form-control form-control-sm" placeholder="Keyword search" />
                        <div class="input-group-append">
                            <button onclick="Search(0)" type="button" class="btn btn-sm btn-light ml-2" data-toggle="tooltip" data-placement="top" title="@_translate.GetStringAdmin("group.tooltip-search")">
                                <i class="fa fa-search"></i>
                            </button>
                        </div>
                    </div>
                    <div class="col-auto mb-3 px-2">
                        <a onclick="OpenAddModal()" href="javascript:void(0)" class="btn btn-sm btn-success waves-effect waves-light" data-animation="fadein" data-plugin="custommodal" data-overlaycolor="#38414a"><i class="fas fa-layer-plus mr-1"></i>@_translate.GetStringAdmin("group.btn-add")</a>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm">
                        <div class="table-wrap">
                            <div class="table-responsive ">
                                <table id="tableData" class="table table-hover table-sm mb-0">
                                    <thead class="thead-light">
                                        <tr>
                                            <th class="py-2" width="5">
                                                <div class="custom-control custom-checkbox">
                                                    <input onclick="CheckAll()" type="checkbox" class="custom-control-input" id="customcheck-all">
                                                    <label class="custom-control-label position-static" for="customcheck-all"></label>
                                                </div>
                                            </th>
                                            @*<th class="py-2" width="100">@_translate.GetStringAdmin("label.images")</th>*@
                                            <th class="py-2">@_translate.GetStringAdmin("label.title")</th>
                                            <th class="py-2 text-center" width="120">@_translate.GetStringAdmin("label.count-view")</th>
                                            <th hidden class="py-2 text-center" width="5">Menu</th>
                                            <th class="text-nowrap resizeable text-center col-1">Mặc định</th>
                                            <th class="py-2 text-center" width="5">Footer</th>
                                            <th class="py-2 text-center" width="100">@_translate.GetStringAdmin("label.action")</th>
                                        </tr>
                                    </thead>
                                    <tbody id="tbodyData">
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div class="d-flex align-items-center mt-3">
                            <div class="my-1 mr-auto">
                                <button type="button" onclick="Enable(0, true)" class="btn btn-sm btn-outline-secondary" data-toggle="tooltip" data-placement="top" title="" data-original-title="active"><i class="fas fa-eye"></i></button>
                                <button type="button" onclick="Enable(0, false)" class="btn btn-sm btn-outline-secondary" data-toggle="tooltip" data-placement="top" title="" data-original-title="inactive"><i class="fas fa-eye-slash"></i></button>
                                <button type="button" onclick="Coppy()" class="btn btn-sm btn-outline-secondary" data-toggle="tooltip" data-placement="top" title="" data-original-title="copy clone row"><i class="fas fa-copy"></i></button>
                                <button type="button" onclick="DeleteMulti()" class="btn btn-sm btn-danger" data-toggle="tooltip" data-placement="top" title="" data-original-title="delete"><i class="fal fa-trash-alt"></i></button>
                                <button type="button" onclick="LoadData()" class="btn btn-sm btn-primary " data-toggle="tooltip" data-placement="top" title="save order" data-original-title=""><i class="fal fa-save"></i></button>
                            </div>
                            <div class="my-1 ml-auto" id="divPaging">
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </div>
        <!-- Compose -->
        <div hidden id="compose" class="col-xl-12">
            <div id="formInput">
                <section hidden class="hk-sec-wrapper pb-0 pt-1 px-1 mb-3">
                    <div hidden class="form-group mb-0">
                        <ul class="nav nav-tabs" id="langTab" role="tablist">
                            <li style="cursor: pointer" lang="vi" class="nav-item">
                                <a class="nav-link active show" data-toggle="tab" role="tab" aria-controls="info" aria-selected="true"><i class="flag-icon flag-icon-vn"></i> Tiếng việt</a>
                            </li>
                            <li style="cursor: pointer" lang="en" class="nav-item">
                                <a class="nav-link" data-toggle="tab" role="tab" aria-controls="img" aria-selected="false"><i class="flag-icon flag-icon-us"></i> English</a>
                            </li>
                        </ul>
                    </div>
                </section>
                <div id="bodyCompose">
                </div>
                <div class="form-group d-flex align-items-center justify-content-start my-2">
                    <div class="form-group d-flex align-items-center border-right pr-2 mb-0 mr-2">
                        <button type="button" onclick="Clear()" class="btn btn-dark mr-2"><i class="fas fa-window-close"></i> @_translate.GetStringAdmin("button.close") </button>
                        <button type="button" id="btnSave" onclick="Save()" class="btn btn-primary mr-1"><i class="fas fa-vote-yea mr-5"></i>@_translate.GetStringAdmin("button.update")</button>
                        <button hidden type="button" id="preview" onclick="Preview()" class="btn btn-cyan mr-1"><i class="far fa-eye"></i> @_translate.GetStringAdmin("button.preview") </button>
                    </div>
                    <div id="toggle_enable" value="true" class="toggle toggle-light toggle-bg-success toggle2 mr-2 raw"></div>
                </div>
            </div>
        </div>
        <!-- /Compose -->

    </div>
    <!-- /Row -->


</div>

<!-- /Container -->
@section Scripts{

    <script type="text/javascript">
        //define
        var actionUrl = "/b-admin/About/"
        var state = "add";
        var lang = "@ConstantStrings.DefaultLangAdmin";
        var listImages = [];
        var cate = [];

        var localStorgaNameObjs = "rawAboutObjs";
        var localStorgaNameMultiLang_Obj = "rawAboutMultiLang_Obj";

        var imagesObj = {
            base64: '',
            type: ''
        }

        var obj = {
            pid: 0,
            enabled: true,
            tagKey: "",
        };

        var objLang = {
            Pid: 0,
            Title: '',
            Content: '',
            LangKey: '',
        }

        var multiLang_obj = []

        $(function () {
            LoadData(lang);
        })

        //-------------------SET GET DATA-------------
        function CustomSetDataEdit(data) {
            obj = data.detail;
            multiLang_obj = data.list;
        }
        function ShowRawData() {
            if (state == "add") {
                // get raw data in localStorage
                var rawCourseObjs = localStorage.getItem(localStorgaNameObjs);
                if (rawCourseObjs != null && typeof rawCourseObjs != "undefined" && rawCourseObjs != "null") {
                    obj = JSON.parse(rawCourseObjs);
                }
                var rawCourseMultiLang_Obj = localStorage.getItem(localStorgaNameMultiLang_Obj);
                if (rawCourseMultiLang_Obj != null && typeof rawCourseMultiLang_Obj != "undefined" && rawCourseMultiLang_Obj != "null") {
                    multiLang_obj = JSON.parse(rawCourseMultiLang_Obj);
                }
            }
            else if (state == "edit") {

            }
            $('#TagKey').val(obj.tagKey);

            SetToggle('#toggle_enable', obj.enabled);

            if (multiLang_obj.length > 0) {
                objLang = multiLang_obj.filter(x => x.LangKey == lang)[0];
            }
            if (objLang) {
                $('#Title').val(objLang.Title);
                SetContentAsync('Content', objLang.Content);
            } else {
                $('#Title').val("");
                SetContentAsync('Content', "");
            }
        }
        function SaveRawData() {
            obj.tagKey = $("#TagKey").val();
            obj.price = ConvertMoneyToNumber($("#Price").val());
            obj.priceDiscount = ConvertMoneyToNumber($("#PriceDiscount").val());
            obj.new = $("#New").is(':checked');
            obj.hot = $("#Hot").is(':checked');
            cate = $('#CourseCatePid').val();
            var tempObjLang = {};
            tempObjLang.Title = $('#Title').val();
            tempObjLang.Description = $('#Description').val();
            tempObjLang.Content = tinymce.get("Content").getContent();
            tempObjLang.LangKey = lang;
            var tempMultiLang_obj = multiLang_obj.filter(x => x.LangKey == lang);
            if (tempMultiLang_obj.length > 0) {
                tempMultiLang_obj[0].Title = tempObjLang.Title;
                tempMultiLang_obj[0].Description = tempObjLang.Description;
                tempMultiLang_obj[0].Content = tempObjLang.Content;
            } else {
                multiLang_obj.push(tempObjLang);
            }
            if (state == "add") {
                localStorage.setItem(localStorgaNameObjs, JSON.stringify(obj));
                localStorage.setItem(localStorgaNameMultiLang_Obj, JSON.stringify(multiLang_obj));
            }
        }

        //---------------------ACTION-----------------
        function GetFormData() {
            var formData = new FormData();
            formData.append("stringObj", JSON.stringify(obj));
            formData.append("stringMultiLangObj", JSON.stringify(multiLang_obj));
            return formData;
        }
        function Validate() {
            SaveRawData();
            if ($('#Title').val() == "") {
                AlertToast('Thông báo', "Chưa nhập tiêu đề", 'warning')
                return false;
            }
            return true;
        }
        function InitInput() {
            InitTinymcePromises('Content').then(function (response) {
                if (response) {
                    tinymce.get("Content").on('keyup', function (e) {
                        SaveRawData();
                    });//content
                }
            });

            $('.raw').keyup(function () {
                SaveRawData();
            });//event raw

        }
        function Clear() {
            state = "add";
            listImages = [];
            imagesObj = {
                base64: '',
                type: ''
            };

            obj = {
                pid: 0,
                enabled: true,
                tagKey: "",
            };

            objLang = {
                Pid: 0,
                Title: '',
                Content: '',
                LangKey: '',
            };

            multiLang_obj = [];
            if (state == 'add') {
                localStorage.setItem(localStorgaNameObjs, JSON.stringify(obj));
                localStorage.setItem(localStorgaNameMultiLang_Obj, JSON.stringify(multiLang_obj));
            }
            else if (state = "edit") {
            }

            $("#compose").attr("hidden", "true");
            $("#list").removeAttr("hidden");
        }

        function SaveStatus(e, id, type) {
            var value = $(e).is(":checked");
            $.ajax({
                url: actionUrl + 'SaveStatus',
                method: 'POST',
                data: {
                    pid: id,
                    value: value,
                    type: type
                },
                success: function (response) {
                    response.isError ? AlertToast('Thông báo', "Thành công", "success") : SweetAlert('Thông báo', "Thất bại", 'error')
                },
                error: function (err) {
                    SweetAlert('Thông báo', "Thất bại", 'error')
                }
            })
        }


           //grid action
        function LoadGrid(jsString, paging) {
            var data = JSON.parse(jsString);
            var html = ""
            for (let i = 0; i < data.length; i++) {
                html += ` <tr class="${!data[i].Enabled ? "inactive" : ""}" tabIndex="${i}" slot="${data[i].Order}"  id="${data[i].Pid}">
                                                 <td>
                                                                              <div  class="custom-control custom-checkbox">
                                                                                  <input  onclick="KtCheckbox()" type="checkbox" class="custom-control-input" id="customCheck-${data[i].Pid}" name="Chk" value="${data[i].Pid}">
                                                                                  <label class="custom-control-label" for="customCheck-${data[i].Pid}">&nbsp;</label>
                                                                             </di v>
                                                                       </td   >
                                                            <td><a        data-toggle="tooltip" data-original-title="edit" style="cursor:pointer"  onclick="Edit(${data[i].Pid})"  class="${data[i].Enabled == false ? "text-mute" : "text-primary"}">${data[i].Title}</a></td>


                                                          <td class="text-center">${data[i].CounterView}</td>

                                                                           @*<td class="text-center">
                                                                             <div  class="custom-control custom-checkbox">
                                                                                                         <input ${data[i].ShowTopMenu ? "checked" : ""} onclick="SaveStatus(this, ${data[i].Pid}, 'menu')" type="checkbox" name="show-menu-${data[i].Pid}-home" id="show-menu-${data[i].Pid}-home" class="custom-control-input">
                                                                                                 <label class="custom-control-label" for="show-menu-${data[i].Pid}-home">&nbsp;</label>
                                                                             </div>
                                                                            </td>*@
        <td class="align-middle text-center pr-0">
                                                                             <div  class="custom-control custom-checkbox">
                                                                                                         <input ${data[i].Default ? "checked" : ""} onclick="SaveStatus(this, ${data[i].Pid}, 'default')" type="checkbox" name="show-menu-${data[i].Pid}-home" id="show-default-${data[i].Pid}-home" class="custom-control-input default-checkbox">
                                                                                                 <label class="custom-control-label" for="show-default-${data[i].Pid}-home">&nbsp;</label>
                                                                             </div>
                                                                            </td>
                                                                                     <td class="text-center">
                                                                     <div  class="custom-control custom-checkbox">
                                                                                                         <input ${data[i].ShowFooter ? "checked" : ""} onclick="SaveStatus(this, ${data[i].Pid}, 'footer')" type="checkbox" name="show-footer-${data[i].Pid}-home" id="show-footer-${data[i].Pid}-home" class="custom-control-input">
                                                                         <label class="custom-control-label" for="show-footer-${data[i].Pid}-home">&nbsp;</label>
                                                                     </div>
                                                                    </td>

                                                               <td class="text-center text-nowrap">
                                                                    <input id="orderInput-${data[i].Pid}" onfocusout="UpdateOrder(${data[i].Pid})" type="text" tabindex="${100 + i}" class="form-control form-control-sm d-inline mr-2 text-right border" placeholder="" value="${data[i].Order}" style="width:45px;height:25px ">
                                                                    <a    style="cursor:pointer"  data-toggle="tooltip" data-original-title="move"><i class="fas fa-arrows-alt text-dark handle"></i></a>

                                                                             <a style="cursor:pointer" onclick="Edit(${data[i].Pid})" class="mx-2" data-toggle="tooltip" data-original-title="edit"><i class="far fa-sliders-h text-dark"></i></a>
                                                                      <a style="cursor:pointer" onclick="Delete(${data[i].Pid})"data-toggle="tooltip" data-original-title="delete"><i class="far fa-trash-alt text-danger"></i></a>
                                                          </td>

                                                        </tr>`            ;
                 }

                    $("#tbodyData").html(html)
               var pageHtml = Paging(paging.curentpage, paging.lastpage);
            $("#divPaging").html(pageHtml)
            ToolTip();
            InitDragDropTable();
        }
        function UncheckDefault(checkbox) {
            $('.default-checkbox').not(checkbox).prop('checked', false);
        }
        function SaveStatus(e, id, type) {
            var checkbox = $(e);
            var value = $(e).is(":checked");
            if (type === "default") {
                UncheckDefault(checkbox)
            }
            $.ajax({
                url: actionUrl + 'SaveStatus',
                method: 'POST',
                data: {
                    pid: id,
                    value: value,
                    type: type
                },
                success: function (response) {
                    response.isError ? AlertToast('Thông báo', "Thành công", "success") : SweetAlert('Thông báo', "Thất bại", 'error')
                },
                error: function (err) {
                    SweetAlert('Thông báo', "Thất bại", 'error')
                }
            })
        }

    </script>
}

