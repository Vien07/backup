// <auto-generated />
using System;
using CMS;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CMS.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20240704125509_initdb")]
    partial class initdb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CMS.Areas.About.Models.AboutCate", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Pid");

                    b.ToTable("AboutCates");

                    b.HasData(
                        new
                        {
                            Pid = 1,
                            Code = "/",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 45, DateTimeKind.Local).AddTicks(6843),
                            Deleted = false,
                            Enabled = true,
                            LastLogin = new DateTime(2024, 7, 4, 19, 55, 8, 45, DateTimeKind.Local).AddTicks(6851),
                            Order = 0
                        });
                });

            modelBuilder.Entity("CMS.Areas.About.Models.AboutDetail", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AboutCatePid")
                        .HasColumnType("int");

                    b.Property<long>("CounterView")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PicThumb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ShowFooter")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowTopMenu")
                        .HasColumnType("bit");

                    b.Property<string>("TagKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Pid");

                    b.HasIndex("AboutCatePid");

                    b.ToTable("AboutDetails");
                });

            modelBuilder.Entity("CMS.Areas.About.Models.MultiLang_AboutDetail", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AboutDetailPid")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("AboutDetailPid");

                    b.ToTable("MultiLang_AboutDetails");
                });

            modelBuilder.Entity("CMS.Areas.Admin.Models.GroupAdminMenu", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("GroupAdminMenus");
                });

            modelBuilder.Entity("CMS.Areas.Admin.Models.GroupPermisson", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("GroupUserCode")
                        .HasColumnType("int");

                    b.Property<string>("ModuleCode")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PermissonCode")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.HasIndex("GroupUserCode");

                    b.HasIndex("ModuleCode");

                    b.HasIndex("PermissonCode");

                    b.ToTable("GroupPermissons");
                });

            modelBuilder.Entity("CMS.Areas.Admin.Models.GroupUser", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("View")
                        .HasColumnType("bit");

                    b.HasKey("Code");

                    b.ToTable("GroupUsers");

                    b.HasData(
                        new
                        {
                            Code = 1,
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 40, DateTimeKind.Local).AddTicks(6322),
                            Deleted = false,
                            Enabled = true,
                            Name = "Super Admin",
                            Order = 1,
                            Role = "Super Admin",
                            View = false
                        },
                        new
                        {
                            Code = 2,
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 40, DateTimeKind.Local).AddTicks(8333),
                            Deleted = false,
                            Enabled = true,
                            Name = "Admin",
                            Order = 2,
                            Role = "Admin",
                            View = true
                        },
                        new
                        {
                            Code = 3,
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 40, DateTimeKind.Local).AddTicks(8342),
                            Deleted = false,
                            Enabled = true,
                            Name = "User",
                            Order = 3,
                            Role = "Staff",
                            View = true
                        });
                });

            modelBuilder.Entity("CMS.Areas.Admin.Models.Log", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IP")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PidCate")
                        .HasColumnType("int");

                    b.Property<int>("PidDetail")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("CMS.Areas.Admin.Models.Module", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("Url")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UrlRewrite")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Code");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Code = "HomePage",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 39, DateTimeKind.Local).AddTicks(8969),
                            Deleted = false,
                            Enabled = true,
                            Locked = false,
                            ModuleName = "Trang chủ (Homepage)",
                            Order = 3,
                            Url = "b-admin/HomePage/"
                        },
                        new
                        {
                            Code = "About",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 40, DateTimeKind.Local).AddTicks(1804),
                            Deleted = false,
                            Enabled = true,
                            Locked = false,
                            ModuleName = "Giới thiệu (About)",
                            Order = 5,
                            Url = "b-admin/About/"
                        },
                        new
                        {
                            Code = "FAQ",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 40, DateTimeKind.Local).AddTicks(1814),
                            Deleted = false,
                            Enabled = true,
                            Locked = false,
                            ModuleName = "FAQ's",
                            Order = 7,
                            Url = "b-admin/FAQ/"
                        },
                        new
                        {
                            Code = "Convenience",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 40, DateTimeKind.Local).AddTicks(1816),
                            Deleted = false,
                            Enabled = true,
                            Locked = false,
                            ModuleName = "Tiện ích (Convenience)",
                            Order = 9,
                            Url = "b-admin/Convenience/Index"
                        },
                        new
                        {
                            Code = "News",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 40, DateTimeKind.Local).AddTicks(1818),
                            Deleted = false,
                            Enabled = true,
                            Locked = false,
                            ModuleName = "Tin tức (News)",
                            Order = 15,
                            Url = "b-admin/News/"
                        },
                        new
                        {
                            Code = "Feature",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 40, DateTimeKind.Local).AddTicks(1820),
                            Deleted = false,
                            Enabled = true,
                            Locked = false,
                            ModuleName = "Tính năng (Feature)",
                            Order = 19,
                            Url = "b-admin/Feature/"
                        },
                        new
                        {
                            Code = "ProductCate",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 40, DateTimeKind.Local).AddTicks(1822),
                            Deleted = false,
                            Enabled = true,
                            Locked = false,
                            ModuleName = "Chu kỳ sản phẩm (ProductCycle)",
                            Order = 25,
                            Url = "b-admin/ProductCate/Index"
                        },
                        new
                        {
                            Code = "Product",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 40, DateTimeKind.Local).AddTicks(1823),
                            Deleted = false,
                            Enabled = true,
                            Locked = false,
                            ModuleName = "Sản phẩm (Product)",
                            Order = 27,
                            Url = "b-admin/Product/Index"
                        },
                        new
                        {
                            Code = "Customer",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 40, DateTimeKind.Local).AddTicks(1825),
                            Deleted = false,
                            Enabled = true,
                            Locked = false,
                            ModuleName = "Khách hàng (Customer)",
                            Order = 35,
                            Url = "b-admin/Customer/Index"
                        },
                        new
                        {
                            Code = "Order",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 40, DateTimeKind.Local).AddTicks(1827),
                            Deleted = false,
                            Enabled = true,
                            Locked = false,
                            ModuleName = "Đơn hàng",
                            Order = 37,
                            Url = "b-admin/Order/Index"
                        },
                        new
                        {
                            Code = "Slide",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 40, DateTimeKind.Local).AddTicks(1829),
                            Deleted = false,
                            Enabled = true,
                            Locked = false,
                            ModuleName = "Slide",
                            Order = 38,
                            Url = "b-admin/Slide/"
                        },
                        new
                        {
                            Code = "Banner",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 40, DateTimeKind.Local).AddTicks(1831),
                            Deleted = false,
                            Enabled = true,
                            Locked = false,
                            ModuleName = "Banner",
                            Order = 41,
                            Url = "b-admin/Banner/"
                        },
                        new
                        {
                            Code = "Advertisement",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 40, DateTimeKind.Local).AddTicks(1832),
                            Deleted = false,
                            Enabled = true,
                            Locked = false,
                            ModuleName = "Quảng cáo (Advertisement)",
                            Order = 43,
                            Url = "b-admin/Advertisement/Index"
                        },
                        new
                        {
                            Code = "Popup",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 40, DateTimeKind.Local).AddTicks(1834),
                            Deleted = false,
                            Enabled = true,
                            Locked = false,
                            ModuleName = "Popup",
                            Order = 45,
                            Url = "b-admin/Popup/Index"
                        },
                        new
                        {
                            Code = "Calendar",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 40, DateTimeKind.Local).AddTicks(1836),
                            Deleted = false,
                            Enabled = true,
                            Locked = false,
                            ModuleName = "Calendar",
                            Order = 47,
                            Url = "b-admin/Calendar/"
                        },
                        new
                        {
                            Code = "Contact",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 40, DateTimeKind.Local).AddTicks(1838),
                            Deleted = false,
                            Enabled = true,
                            Locked = false,
                            ModuleName = "Liên hệ (Contact)",
                            Order = 49,
                            Url = "b-admin/Contact/Index"
                        },
                        new
                        {
                            Code = "ContactList",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 40, DateTimeKind.Local).AddTicks(1840),
                            Deleted = false,
                            Enabled = true,
                            Locked = false,
                            ModuleName = "Danh sách liên hệ (Contact list)",
                            Order = 53,
                            Url = "b-admin/ContactList/Index"
                        },
                        new
                        {
                            Code = "GeneralConfiguration",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 40, DateTimeKind.Local).AddTicks(1857),
                            Deleted = false,
                            Enabled = true,
                            Locked = false,
                            ModuleName = "Cài đặt (Setting)",
                            Order = 57,
                            Url = "b-admin/GeneralConfiguration/Index"
                        },
                        new
                        {
                            Code = "Translation",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 40, DateTimeKind.Local).AddTicks(1859),
                            Deleted = false,
                            Enabled = true,
                            Locked = false,
                            ModuleName = "Dịch ngôn ngữ",
                            Order = 59,
                            Url = "b-admin/Translation/Index"
                        },
                        new
                        {
                            Code = "Group",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 40, DateTimeKind.Local).AddTicks(1860),
                            Deleted = false,
                            Enabled = true,
                            Locked = false,
                            ModuleName = "Nhóm quản lý (Group)",
                            Order = 61,
                            Url = "b-admin/Group/Index"
                        },
                        new
                        {
                            Code = "Users",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 40, DateTimeKind.Local).AddTicks(1862),
                            Deleted = false,
                            Enabled = true,
                            Locked = false,
                            ModuleName = "Nhân viên quản lý (Users)",
                            Order = 63,
                            Url = "b-admin/Users/Index"
                        },
                        new
                        {
                            Code = "Permit",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 40, DateTimeKind.Local).AddTicks(1864),
                            Deleted = false,
                            Enabled = true,
                            Locked = false,
                            ModuleName = "Phân quyền (Permission)",
                            Order = 65,
                            Url = "b-admin/Permit/Index"
                        },
                        new
                        {
                            Code = "Log",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 40, DateTimeKind.Local).AddTicks(1866),
                            Deleted = false,
                            Enabled = true,
                            Locked = false,
                            ModuleName = "Log",
                            Order = 67,
                            Url = "b-admin/Log/Index"
                        },
                        new
                        {
                            Code = "Trash",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 40, DateTimeKind.Local).AddTicks(1867),
                            Deleted = false,
                            Enabled = true,
                            Locked = false,
                            ModuleName = "Thùng rác (Trash)",
                            Order = 69,
                            Url = "b-admin/Trash/"
                        });
                });

            modelBuilder.Entity("CMS.Areas.Admin.Models.Permission", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Code");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Code = "VIEW",
                            Locked = false,
                            Name = "view"
                        },
                        new
                        {
                            Code = "EDIT",
                            Locked = false,
                            Name = "edit"
                        },
                        new
                        {
                            Code = "DELETE",
                            Locked = false,
                            Name = "delete"
                        },
                        new
                        {
                            Code = "ADD",
                            Locked = false,
                            Name = "add"
                        },
                        new
                        {
                            Code = "ONLYSUBADMIN",
                            Locked = true,
                            Name = "onlysubadmin"
                        });
                });

            modelBuilder.Entity("CMS.Areas.Admin.Models.RolePermission", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminMenuCode")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Licensed")
                        .HasColumnType("bit");

                    b.Property<long>("PermissionPid")
                        .HasColumnType("bigint");

                    b.Property<string>("RoleCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("CMS.Areas.Admin.Models.User", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Avatar")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("GroupUserCode")
                        .HasColumnType("int");

                    b.Property<string>("IP")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("RecoveryString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RecoveryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Salt")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Pid");

                    b.HasIndex("GroupUserCode");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Pid = 1,
                            Avatar = "",
                            Code = "bizmac",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 41, DateTimeKind.Local).AddTicks(2160),
                            Deleted = false,
                            Email = "info@bizmac.com.vn",
                            Enabled = true,
                            FirstName = "bizmac",
                            FullName = "bizmac ecommerce",
                            GroupUserCode = 1,
                            LastLogin = new DateTime(2024, 7, 4, 19, 55, 8, 41, DateTimeKind.Local).AddTicks(2168),
                            LastName = "ecommerce ",
                            Order = 1,
                            Password = "559F52E363C3AA964CBD64481E3E7BDC6E99A9A127BCCD8E010685AC31B2E949"
                        });
                });

            modelBuilder.Entity("CMS.Areas.Admin.Models.UserPermission", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModuleCode")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PermissonCode")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserCode")
                        .HasColumnType("int");

                    b.HasKey("Pid");

                    b.HasIndex("ModuleCode");

                    b.HasIndex("PermissonCode");

                    b.HasIndex("UserCode");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("CMS.Areas.Admin.Models.Visitor", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brower")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastOnlineTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Pid");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("CMS.Areas.Advertisement.Models.Advertisement", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DisplayType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Pid");

                    b.ToTable("Advertisements");
                });

            modelBuilder.Entity("CMS.Areas.Advertisement.Models.Advertisement_Page", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdvertisementPid")
                        .HasColumnType("int");

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.HasKey("Pid");

                    b.HasIndex("AdvertisementPid");

                    b.HasIndex("PageId");

                    b.ToTable("Advertisement_Pages");
                });

            modelBuilder.Entity("CMS.Areas.Advertisement.Models.MultiLang_Advertisement", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdvertisementPid")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmbedCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("AdvertisementPid");

                    b.ToTable("MultiLang_Advertisements");
                });

            modelBuilder.Entity("CMS.Areas.Banner.Models.Banner", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Page")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Pid");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("CMS.Areas.Banner.Models.Banner_Page", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BannerPid")
                        .HasColumnType("int");

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.HasKey("Pid");

                    b.HasIndex("BannerPid");

                    b.HasIndex("PageId");

                    b.ToTable("Banner_Pages");
                });

            modelBuilder.Entity("CMS.Areas.Banner.Models.MultiLang_Banner", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BannerPid")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("BannerPid");

                    b.ToTable("MultiLang_Banners");
                });

            modelBuilder.Entity("CMS.Areas.Banner.Models.MultiLang_Page", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PagePid")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("PagePid");

                    b.ToTable("MultiLang_Pages");

                    b.HasData(
                        new
                        {
                            Pid = 1,
                            LangKey = "vi",
                            PagePid = 1,
                            Title = "Trang chủ"
                        },
                        new
                        {
                            Pid = 2,
                            LangKey = "en",
                            PagePid = 1,
                            Title = "Home"
                        },
                        new
                        {
                            Pid = 3,
                            LangKey = "vi",
                            PagePid = 2,
                            Title = "Giới thiệu"
                        },
                        new
                        {
                            Pid = 4,
                            LangKey = "en",
                            PagePid = 2,
                            Title = "About"
                        },
                        new
                        {
                            Pid = 5,
                            LangKey = "vi",
                            PagePid = 3,
                            Title = "Liên hệ"
                        },
                        new
                        {
                            Pid = 6,
                            LangKey = "en",
                            PagePid = 3,
                            Title = "Contact"
                        },
                        new
                        {
                            Pid = 7,
                            LangKey = "vi",
                            PagePid = 4,
                            Title = "Sản phẩm"
                        },
                        new
                        {
                            Pid = 8,
                            LangKey = "en",
                            PagePid = 4,
                            Title = "Product"
                        },
                        new
                        {
                            Pid = 9,
                            LangKey = "vi",
                            PagePid = 5,
                            Title = "Khách hàng"
                        },
                        new
                        {
                            Pid = 10,
                            LangKey = "en",
                            PagePid = 5,
                            Title = "Customer"
                        },
                        new
                        {
                            Pid = 11,
                            LangKey = "vi",
                            PagePid = 6,
                            Title = "Đơn hàng"
                        },
                        new
                        {
                            Pid = 12,
                            LangKey = "en",
                            PagePid = 6,
                            Title = "Order"
                        },
                        new
                        {
                            Pid = 13,
                            LangKey = "vi",
                            PagePid = 7,
                            Title = "Tính năng"
                        },
                        new
                        {
                            Pid = 14,
                            LangKey = "en",
                            PagePid = 7,
                            Title = "Feature"
                        },
                        new
                        {
                            Pid = 15,
                            LangKey = "vi",
                            PagePid = 8,
                            Title = "Tin tức"
                        },
                        new
                        {
                            Pid = 16,
                            LangKey = "en",
                            PagePid = 8,
                            Title = "News"
                        });
                });

            modelBuilder.Entity("CMS.Areas.Banner.Models.Page", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Pid");

                    b.ToTable("Pages");

                    b.HasData(
                        new
                        {
                            Pid = 1,
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 36, DateTimeKind.Local).AddTicks(1760),
                            Deleted = false,
                            Enabled = true,
                            LastLogin = new DateTime(2024, 7, 4, 19, 55, 8, 37, DateTimeKind.Local).AddTicks(3154),
                            Order = 0
                        },
                        new
                        {
                            Pid = 2,
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 37, DateTimeKind.Local).AddTicks(4679),
                            Deleted = false,
                            Enabled = true,
                            LastLogin = new DateTime(2024, 7, 4, 19, 55, 8, 37, DateTimeKind.Local).AddTicks(4687),
                            Order = 0
                        },
                        new
                        {
                            Pid = 3,
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 37, DateTimeKind.Local).AddTicks(4695),
                            Deleted = false,
                            Enabled = true,
                            LastLogin = new DateTime(2024, 7, 4, 19, 55, 8, 37, DateTimeKind.Local).AddTicks(4697),
                            Order = 0
                        },
                        new
                        {
                            Pid = 4,
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 37, DateTimeKind.Local).AddTicks(4701),
                            Deleted = false,
                            Enabled = true,
                            LastLogin = new DateTime(2024, 7, 4, 19, 55, 8, 37, DateTimeKind.Local).AddTicks(4702),
                            Order = 0
                        },
                        new
                        {
                            Pid = 5,
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 37, DateTimeKind.Local).AddTicks(4705),
                            Deleted = false,
                            Enabled = true,
                            LastLogin = new DateTime(2024, 7, 4, 19, 55, 8, 37, DateTimeKind.Local).AddTicks(4706),
                            Order = 0
                        },
                        new
                        {
                            Pid = 6,
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 37, DateTimeKind.Local).AddTicks(4713),
                            Deleted = false,
                            Enabled = true,
                            LastLogin = new DateTime(2024, 7, 4, 19, 55, 8, 37, DateTimeKind.Local).AddTicks(4715),
                            Order = 0
                        },
                        new
                        {
                            Pid = 7,
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 37, DateTimeKind.Local).AddTicks(4718),
                            Deleted = false,
                            Enabled = true,
                            LastLogin = new DateTime(2024, 7, 4, 19, 55, 8, 37, DateTimeKind.Local).AddTicks(4719),
                            Order = 0
                        },
                        new
                        {
                            Pid = 8,
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 37, DateTimeKind.Local).AddTicks(4722),
                            Deleted = false,
                            Enabled = true,
                            LastLogin = new DateTime(2024, 7, 4, 19, 55, 8, 37, DateTimeKind.Local).AddTicks(4723),
                            Order = 0
                        });
                });

            modelBuilder.Entity("CMS.Areas.Calendar.Models.Calendar", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Pid");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("CMS.Areas.Calendar.Models.MultiLang_Calendar", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CalendarPid")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("CalendarPid");

                    b.ToTable("MultiLang_Calendars");
                });

            modelBuilder.Entity("CMS.Areas.Comment.Models.Comment", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PicThumb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("isLocked")
                        .HasColumnType("bit");

                    b.HasKey("Pid");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CMS.Areas.Comment.Models.MultiLang_Comment", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentPid")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("CommentPid");

                    b.ToTable("MultiLang_Comments");
                });

            modelBuilder.Entity("CMS.Areas.Configurations.Models.Configuration", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("Configurations");

                    b.HasData(
                        new
                        {
                            Key = "website-Name",
                            Group = "Infomation",
                            NameKey = "WebsiteName",
                            Type = "text"
                        },
                        new
                        {
                            Key = "email-Admin",
                            Group = "Infomation",
                            NameKey = "EmailAdmin",
                            Type = "text",
                            Value = "thanh.nc@bizmac.com.vn"
                        },
                        new
                        {
                            Key = "meta-Keywords",
                            Group = "Infomation",
                            NameKey = "MetaKeywords",
                            Type = "text"
                        },
                        new
                        {
                            Key = "meta-Description",
                            Group = "Infomation",
                            NameKey = "MetaDescription",
                            Type = "text"
                        },
                        new
                        {
                            Key = "code-Header",
                            Group = "Infomation",
                            NameKey = "CodeHeader",
                            Type = "text"
                        },
                        new
                        {
                            Key = "code-Body",
                            Group = "Infomation",
                            NameKey = "CodeBody",
                            Type = "text"
                        },
                        new
                        {
                            Key = "share-facebook",
                            Group = "Infomation",
                            NameKey = "ShareFacebook",
                            Type = "text"
                        },
                        new
                        {
                            Key = "share-whatsapp",
                            Group = "Infomation",
                            NameKey = "ShareWhatsApp",
                            Type = "text"
                        },
                        new
                        {
                            Key = "share-skype",
                            Group = "Infomation",
                            NameKey = "ShareSkype",
                            Type = "text"
                        },
                        new
                        {
                            Key = "share-viber",
                            Group = "Infomation",
                            NameKey = "ShareViber",
                            Type = "text"
                        },
                        new
                        {
                            Key = "share-twitter",
                            Group = "Infomation",
                            NameKey = "ShareTwitter",
                            Type = "text"
                        },
                        new
                        {
                            Key = "share-youtube",
                            Group = "Infomation",
                            NameKey = "ShareYoutube",
                            Type = "text"
                        },
                        new
                        {
                            Key = "share-telegram",
                            Group = "Infomation",
                            NameKey = "ShareTelegram",
                            Type = "text"
                        },
                        new
                        {
                            Key = "share-linkedin",
                            Group = "Infomation",
                            NameKey = "ShareLinkedin",
                            Type = "text"
                        },
                        new
                        {
                            Key = "share-instagram",
                            Group = "Infomation",
                            NameKey = "ShareInstagram",
                            Type = "text"
                        },
                        new
                        {
                            Key = "share-pinterest",
                            Group = "Infomation",
                            NameKey = "SharePinterest",
                            Type = "text"
                        },
                        new
                        {
                            Key = "share-podcast",
                            Group = "Infomation",
                            NameKey = "SharePodcast",
                            Type = "text"
                        },
                        new
                        {
                            Key = "link-policy",
                            Group = "Infomation",
                            NameKey = "LinkPolicy",
                            Type = "text"
                        },
                        new
                        {
                            Key = "share-zalo",
                            Group = "Infomation",
                            NameKey = "ShareZalo",
                            Type = "text"
                        },
                        new
                        {
                            Key = "share-tiktok",
                            Group = "Infomation",
                            NameKey = "ShareTiktok",
                            Type = "text"
                        },
                        new
                        {
                            Key = "link-bct",
                            Group = "Infomation",
                            NameKey = "LinkBCT",
                            Type = "text"
                        },
                        new
                        {
                            Key = "link-certificate",
                            Group = "Infomation",
                            NameKey = "LinkCertificate",
                            Type = "text"
                        },
                        new
                        {
                            Key = "root-domain",
                            Group = "Infomation",
                            NameKey = "RootDomain",
                            Type = "text"
                        },
                        new
                        {
                            Key = "images-upload-prefix",
                            Group = "Images",
                            NameKey = "ImagePrefix",
                            Type = "text",
                            Value = "bizmac_"
                        },
                        new
                        {
                            Key = "image-upload-min-width",
                            Group = "Images",
                            NameKey = "ImageMinWidth",
                            Type = "text",
                            Value = "600"
                        },
                        new
                        {
                            Key = "image-upload-max-width",
                            Group = "Images",
                            NameKey = "ImageMaxWidth",
                            Type = "text",
                            Value = "1366"
                        },
                        new
                        {
                            Key = "banner-slide-upload-width",
                            Group = "Images",
                            NameKey = "BannerSlideWidth",
                            Type = "text",
                            Value = "1920"
                        },
                        new
                        {
                            Key = "logo",
                            Group = "Images",
                            NameKey = "Logo",
                            Type = "file",
                            Value = "bizmac.png"
                        },
                        new
                        {
                            Key = "logo-footer",
                            Group = "Images",
                            NameKey = "LogoFooter",
                            Type = "file",
                            Value = "bizmac.png"
                        },
                        new
                        {
                            Key = "favicon",
                            Group = "Images",
                            NameKey = "Favicon",
                            Type = "file"
                        },
                        new
                        {
                            Key = "default-og-image",
                            Group = "Images",
                            NameKey = "DefaultOgImage",
                            Type = "file"
                        },
                        new
                        {
                            Key = "faq-image",
                            Group = "Images",
                            NameKey = "FAQImage",
                            Type = "file"
                        },
                        new
                        {
                            Key = "home-image",
                            Group = "Images",
                            NameKey = "HomeImage",
                            Type = "file"
                        },
                        new
                        {
                            Key = "home-image-mobile",
                            Group = "Images",
                            NameKey = "HomeImageMobile",
                            Type = "file"
                        },
                        new
                        {
                            Key = "feature-image",
                            Group = "Images",
                            NameKey = "FeatureImage",
                            Type = "file"
                        },
                        new
                        {
                            Key = "bct-image",
                            Group = "Images",
                            NameKey = "BctImage",
                            Type = "file"
                        },
                        new
                        {
                            Key = "certificate-image",
                            Group = "Images",
                            NameKey = "CertificateImage",
                            Type = "file"
                        },
                        new
                        {
                            Key = "popup-delay-time",
                            Group = "Images",
                            NameKey = "PopupDelayTime",
                            Type = "text",
                            Value = "2"
                        },
                        new
                        {
                            Key = "watermark-image",
                            Group = "Images",
                            NameKey = "WatermarkImage",
                            Type = "file"
                        },
                        new
                        {
                            Key = "watermark-text",
                            Group = "Images",
                            NameKey = "WatermarkText",
                            Type = "text"
                        },
                        new
                        {
                            Key = "watermark-opacity",
                            Group = "Images",
                            NameKey = "WatermarkOpacity",
                            Type = "text",
                            Value = "40"
                        },
                        new
                        {
                            Key = "watermark-type",
                            Group = "Images",
                            NameKey = "WatermarkType",
                            Type = "radio",
                            Value = "image"
                        },
                        new
                        {
                            Key = "how-image-list-show",
                            Group = "Images",
                            NameKey = "HowImageListShow",
                            Type = "radio",
                            Value = "slide"
                        },
                        new
                        {
                            Key = "position-image-list-show",
                            Group = "Images",
                            NameKey = "PositionImageListShow",
                            Type = "radio",
                            Value = "top"
                        },
                        new
                        {
                            Key = "watermark-position",
                            Group = "Images",
                            NameKey = "WatermarkPosition",
                            Type = "radio",
                            Value = "bottomRight"
                        },
                        new
                        {
                            Key = "reCaptcha-site-key",
                            Group = "Other",
                            NameKey = "reCapchaSiteKey",
                            Type = "text"
                        },
                        new
                        {
                            Key = "reCaptcha-secret-key",
                            Group = "Other",
                            NameKey = "reCatchaSecretKey",
                            Type = "text"
                        },
                        new
                        {
                            Key = "google-signin-key",
                            Group = "Infomation",
                            NameKey = "GoogleSignInKey",
                            Type = "text"
                        },
                        new
                        {
                            Key = "facebook-appid",
                            Group = "Infomation",
                            NameKey = "FacebookAppId",
                            Type = "text"
                        },
                        new
                        {
                            Key = "zalo-oaid",
                            Group = "Infomation",
                            NameKey = "ZaloOAId",
                            Type = "text",
                            Value = "1"
                        },
                        new
                        {
                            Key = "hot-faq-limit",
                            Group = "Other",
                            NameKey = "HotFAQLimit",
                            Type = "text",
                            Value = "5"
                        },
                        new
                        {
                            Key = "hot-news-limit",
                            Group = "Other",
                            NameKey = "HotNewsLimit",
                            Type = "text",
                            Value = "5"
                        },
                        new
                        {
                            Key = "hot-product-limit",
                            Group = "Other",
                            NameKey = "HotProductLimit",
                            Type = "text",
                            Value = "5"
                        },
                        new
                        {
                            Key = "hot-project-limit",
                            Group = "Other",
                            NameKey = "HotProjectLimit",
                            Type = "text",
                            Value = "5"
                        },
                        new
                        {
                            Key = "hot-feature-limit",
                            Group = "Other",
                            NameKey = "HotFeatureLimit",
                            Type = "text",
                            Value = "5"
                        },
                        new
                        {
                            Key = "hot-gallery-limit",
                            Group = "Other",
                            NameKey = "HotGalleryLimit",
                            Type = "text",
                            Value = "5"
                        },
                        new
                        {
                            Key = "relate-faq-limit",
                            Group = "Other",
                            NameKey = "RelateFAQLimit",
                            Type = "text",
                            Value = "5"
                        },
                        new
                        {
                            Key = "relate-news-limit",
                            Group = "Other",
                            NameKey = "RelateNewsLimit",
                            Type = "text",
                            Value = "5"
                        },
                        new
                        {
                            Key = "relate-product-limit",
                            Group = "Other",
                            NameKey = "RelateProductLimit",
                            Type = "text",
                            Value = "5"
                        },
                        new
                        {
                            Key = "relate-project-limit",
                            Group = "Other",
                            NameKey = "RelateProjectLimit",
                            Type = "text",
                            Value = "5"
                        },
                        new
                        {
                            Key = "relate-feature-limit",
                            Group = "Other",
                            NameKey = "RelateFeatureLimit",
                            Type = "text",
                            Value = "5"
                        },
                        new
                        {
                            Key = "relate-gallery-limit",
                            Group = "Other",
                            NameKey = "RelateGalleryLimit",
                            Type = "text",
                            Value = "5"
                        },
                        new
                        {
                            Key = "date-format",
                            Group = "Other",
                            NameKey = "DateFormat",
                            Type = "select",
                            Value = "DD/MM/YYYY"
                        },
                        new
                        {
                            Key = "page-limit",
                            Group = "Other",
                            NameKey = "PageLimit",
                            Type = "text",
                            Value = "12"
                        },
                        new
                        {
                            Key = "page-limit-detail",
                            Group = "Other",
                            NameKey = "PageLimitDetail",
                            Type = "text",
                            Value = "6"
                        },
                        new
                        {
                            Key = "robots",
                            Group = "Other",
                            NameKey = "Robots",
                            Type = "check"
                        },
                        new
                        {
                            Key = "maintenance",
                            Group = "Other",
                            NameKey = "Maintenance",
                            Type = "check"
                        },
                        new
                        {
                            Key = "recaptcha",
                            Group = "Other",
                            NameKey = "Recaptcha",
                            Type = "check"
                        },
                        new
                        {
                            Key = "page-limit-admin",
                            Group = "Other",
                            NameKey = "PageLimitAdmin",
                            Type = "text",
                            Value = "12"
                        },
                        new
                        {
                            Key = "watermark-active",
                            Group = "Other",
                            NameKey = "WatermarkActive",
                            Type = "check"
                        },
                        new
                        {
                            Key = "watermark-picThumb-active",
                            Group = "Other",
                            NameKey = "WatermarkPicThumbActive",
                            Type = "check"
                        },
                        new
                        {
                            Key = "google-login",
                            Group = "Other",
                            NameKey = "GoogleLogin",
                            Type = "check"
                        },
                        new
                        {
                            Key = "facebook-login",
                            Group = "Other",
                            NameKey = "FacebookLogin",
                            Type = "check"
                        },
                        new
                        {
                            Key = "seo-config",
                            Group = "Other",
                            NameKey = "SEOConfig",
                            Type = "check",
                            Value = "off"
                        },
                        new
                        {
                            Key = "product-code",
                            Group = "Other",
                            NameKey = "ProductCode",
                            Type = "text"
                        },
                        new
                        {
                            Key = "money-format",
                            Group = "Other",
                            NameKey = "FormatMoney",
                            Type = "select",
                            Value = "."
                        },
                        new
                        {
                            Key = "email-fromName",
                            Group = "Email",
                            NameKey = "EmailFromName",
                            Type = "text",
                            Value = "bizmac.com"
                        },
                        new
                        {
                            Key = "email-fromEmail",
                            Group = "Email",
                            NameKey = "EmailFromEmail",
                            Type = "text",
                            Value = "thanh.nc@bizmac.com.vn"
                        },
                        new
                        {
                            Key = "email-SMTPServer",
                            Group = "Email",
                            NameKey = "EmailSMTPServer",
                            Type = "text",
                            Value = "smtp.gmail.com"
                        },
                        new
                        {
                            Key = "email-SMTPUser",
                            Group = "Email",
                            NameKey = "EmailSMTPUser",
                            Type = "text",
                            Value = "noreply.smtp.web@gmail.com"
                        },
                        new
                        {
                            Key = "email-SMTPPassword",
                            Group = "Email",
                            NameKey = "EmailSMTPPassword",
                            Type = "text",
                            Value = "tjthlgoblzekmpud"
                        },
                        new
                        {
                            Key = "email-port",
                            Group = "Email",
                            NameKey = "EmailPort",
                            Type = "text",
                            Value = "587"
                        },
                        new
                        {
                            Key = "email-SSLTLSEncryption",
                            Group = "Email",
                            NameKey = "EmailEncryption",
                            Type = "select",
                            Value = "TLS"
                        },
                        new
                        {
                            Key = "email-GlobalEmailHeader",
                            Group = "Email",
                            NameKey = "EmailGlobalEmailHeader",
                            Type = "text",
                            Value = ""
                        },
                        new
                        {
                            Key = "email-GlobalEmailFooter",
                            Group = "Email",
                            NameKey = "EmailGlobalEmailFooter",
                            Type = "text",
                            Value = ""
                        },
                        new
                        {
                            Key = "tax-code-company",
                            Group = "Infomation",
                            NameKey = "TaxCodeCompany",
                            Type = "text",
                            Value = ""
                        },
                        new
                        {
                            Key = "display-ibanking",
                            Group = "Infomation",
                            NameKey = "DisplayiBanking",
                            Type = "check"
                        },
                        new
                        {
                            Key = "ibanking-name",
                            Group = "Infomation",
                            NameKey = "iBankingName",
                            Type = "text",
                            Value = ""
                        },
                        new
                        {
                            Key = "ibanking-info",
                            Group = "Infomation",
                            NameKey = "iBankingInfo",
                            Type = "text",
                            Value = ""
                        },
                        new
                        {
                            Key = "display-momo",
                            Group = "Infomation",
                            NameKey = "DisplayMomo",
                            Type = "check"
                        },
                        new
                        {
                            Key = "momo-api",
                            Group = "Infomation",
                            NameKey = "MomoApi",
                            Type = "text",
                            Value = ""
                        },
                        new
                        {
                            Key = "momo-partner-code",
                            Group = "Infomation",
                            NameKey = "MomoPartnerCode",
                            Type = "select",
                            Value = ""
                        },
                        new
                        {
                            Key = "momo-access-key",
                            Group = "Infomation",
                            NameKey = "MomoAccessKey",
                            Type = "text",
                            Value = ""
                        },
                        new
                        {
                            Key = "momo-secrect-key",
                            Group = "Infomation",
                            NameKey = "MomoSecrectKey",
                            Type = "text",
                            Value = ""
                        });
                });

            modelBuilder.Entity("CMS.Areas.Configurations.Models.EmailTempateVariable", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.ToTable("EmailTempateVariables");

                    b.HasData(
                        new
                        {
                            Pid = 1,
                            Code = "{{Logo}}",
                            Group = "ContactToCustomer",
                            Name = "Logo"
                        },
                        new
                        {
                            Pid = 2,
                            Code = "{{Hotline}}",
                            Group = "ContactToCustomer",
                            Name = "Hotline"
                        },
                        new
                        {
                            Pid = 3,
                            Code = "{{CompanyName}}",
                            Group = "ContactToCustomer",
                            Name = "CompanyName"
                        },
                        new
                        {
                            Pid = 4,
                            Code = "{{DatetimeNow}}",
                            Group = "ContactToCustomer",
                            Name = "DatetimeNow"
                        },
                        new
                        {
                            Pid = 5,
                            Code = "{{FromName}}",
                            Group = "ContactToCustomer",
                            Name = "FromName"
                        },
                        new
                        {
                            Pid = 6,
                            Code = "{{ClientName}}",
                            Group = "ContactToCustomer",
                            Name = "ClientName"
                        },
                        new
                        {
                            Pid = 7,
                            Code = "{{Logo}}",
                            Group = "ContactToAdmin",
                            Name = "Logo"
                        },
                        new
                        {
                            Pid = 8,
                            Code = "{{Hotline}}",
                            Group = "ContactToAdmin",
                            Name = "Hotline"
                        },
                        new
                        {
                            Pid = 9,
                            Code = "{{CompanyName}}",
                            Group = "ContactToAdmin",
                            Name = "CompanyName"
                        },
                        new
                        {
                            Pid = 10,
                            Code = "{{DatetimeNow}}",
                            Group = "ContactToAdmin",
                            Name = "DatetimeNow"
                        },
                        new
                        {
                            Pid = 11,
                            Code = "{{FromName}}",
                            Group = "ContactToAdmin",
                            Name = "FromName"
                        },
                        new
                        {
                            Pid = 12,
                            Code = "{{FullName}}",
                            Group = "ContactToAdmin",
                            Name = "FullName"
                        },
                        new
                        {
                            Pid = 13,
                            Code = "{{Email}}",
                            Group = "ContactToAdmin",
                            Name = "Email"
                        },
                        new
                        {
                            Pid = 14,
                            Code = "{{PhoneNumber}}",
                            Group = "ContactToAdmin",
                            Name = "PhoneNumber"
                        },
                        new
                        {
                            Pid = 15,
                            Code = "{{Title}}",
                            Group = "ContactToAdmin",
                            Name = "Title"
                        },
                        new
                        {
                            Pid = 16,
                            Code = "{{Content}}",
                            Group = "ContactToAdmin",
                            Name = "Content"
                        },
                        new
                        {
                            Pid = 17,
                            Code = "{{Logo}}",
                            Group = "ActiveAccount",
                            Name = "Logo"
                        },
                        new
                        {
                            Pid = 18,
                            Code = "{{Hotline}}",
                            Group = "ActiveAccount",
                            Name = "Hotline"
                        },
                        new
                        {
                            Pid = 19,
                            Code = "{{CompanyName}}",
                            Group = "ActiveAccount",
                            Name = "CompanyName"
                        },
                        new
                        {
                            Pid = 20,
                            Code = "{{DatetimeNow}}",
                            Group = "ActiveAccount",
                            Name = "DatetimeNow"
                        },
                        new
                        {
                            Pid = 21,
                            Code = "{{FromName}}",
                            Group = "ActiveAccount",
                            Name = "FromName"
                        },
                        new
                        {
                            Pid = 22,
                            Code = "{{LinkActiveAccount}}",
                            Group = "ActiveAccount",
                            Name = "LinkActiveAccount"
                        },
                        new
                        {
                            Pid = 23,
                            Code = "{{Logo}}",
                            Group = "ForgotPassword",
                            Name = "Logo"
                        },
                        new
                        {
                            Pid = 24,
                            Code = "{{Hotline}}",
                            Group = "ForgotPassword",
                            Name = "Hotline"
                        },
                        new
                        {
                            Pid = 25,
                            Code = "{{CompanyName}}",
                            Group = "ForgotPassword",
                            Name = "CompanyName"
                        },
                        new
                        {
                            Pid = 26,
                            Code = "{{DatetimeNow}}",
                            Group = "ForgotPassword",
                            Name = "DatetimeNow"
                        },
                        new
                        {
                            Pid = 27,
                            Code = "{{FromName}}",
                            Group = "ForgotPassword",
                            Name = "FromName"
                        },
                        new
                        {
                            Pid = 28,
                            Code = "{{LinkForgotPassword}}",
                            Group = "ForgotPassword",
                            Name = "LinkForgotPassword"
                        },
                        new
                        {
                            Pid = 29,
                            Code = "{{Logo}}",
                            Group = "RecruitToCustomer",
                            Name = "Logo"
                        },
                        new
                        {
                            Pid = 30,
                            Code = "{{Hotline}}",
                            Group = "RecruitToCustomer",
                            Name = "Hotline"
                        },
                        new
                        {
                            Pid = 31,
                            Code = "{{CompanyName}}",
                            Group = "RecruitToCustomer",
                            Name = "CompanyName"
                        },
                        new
                        {
                            Pid = 32,
                            Code = "{{DatetimeNow}}",
                            Group = "RecruitToCustomer",
                            Name = "DatetimeNow"
                        },
                        new
                        {
                            Pid = 33,
                            Code = "{{FromName}}",
                            Group = "RecruitToCustomer",
                            Name = "FromName"
                        },
                        new
                        {
                            Pid = 34,
                            Code = "{{ClientName}}",
                            Group = "RecruitToCustomer",
                            Name = "ClientName"
                        },
                        new
                        {
                            Pid = 35,
                            Code = "{{Logo}}",
                            Group = "RecruitToAdmin",
                            Name = "Logo"
                        },
                        new
                        {
                            Pid = 36,
                            Code = "{{Hotline}}",
                            Group = "RecruitToAdmin",
                            Name = "Hotline"
                        },
                        new
                        {
                            Pid = 37,
                            Code = "{{CompanyName}}",
                            Group = "RecruitToAdmin",
                            Name = "CompanyName"
                        },
                        new
                        {
                            Pid = 38,
                            Code = "{{DatetimeNow}}",
                            Group = "RecruitToAdmin",
                            Name = "DatetimeNow"
                        },
                        new
                        {
                            Pid = 39,
                            Code = "{{FromName}}",
                            Group = "RecruitToAdmin",
                            Name = "FromName"
                        },
                        new
                        {
                            Pid = 41,
                            Code = "{{FullName}}",
                            Group = "RecruitToAdmin",
                            Name = "FullName"
                        },
                        new
                        {
                            Pid = 42,
                            Code = "{{Email}}",
                            Group = "RecruitToAdmin",
                            Name = "Email"
                        },
                        new
                        {
                            Pid = 43,
                            Code = "{{PhoneNumber}}",
                            Group = "RecruitToAdmin",
                            Name = "PhoneNumber"
                        },
                        new
                        {
                            Pid = 44,
                            Code = "{{Job}}",
                            Group = "RecruitToAdmin",
                            Name = "Job"
                        },
                        new
                        {
                            Pid = 45,
                            Code = "{{Title}}",
                            Group = "RecruitToAdmin",
                            Name = "Title"
                        },
                        new
                        {
                            Pid = 46,
                            Code = "{{Content}}",
                            Group = "RecruitToAdmin",
                            Name = "Content"
                        },
                        new
                        {
                            Pid = 47,
                            Code = "{{Logo}}",
                            Group = "CustomerOrder",
                            Name = "Logo"
                        },
                        new
                        {
                            Pid = 48,
                            Code = "{{Hotline}}",
                            Group = "CustomerOrder",
                            Name = "Hotline"
                        },
                        new
                        {
                            Pid = 49,
                            Code = "{{CompanyName}}",
                            Group = "CustomerOrder",
                            Name = "CompanyName"
                        },
                        new
                        {
                            Pid = 50,
                            Code = "{{DatetimeNow}}",
                            Group = "CustomerOrder",
                            Name = "DatetimeNow"
                        },
                        new
                        {
                            Pid = 51,
                            Code = "{{FromName}}",
                            Group = "CustomerOrder",
                            Name = "FromName"
                        },
                        new
                        {
                            Pid = 52,
                            Code = "{{FullName}}",
                            Group = "CustomerOrder",
                            Name = "FullName"
                        },
                        new
                        {
                            Pid = 53,
                            Code = "{{Email}}",
                            Group = "CustomerOrder",
                            Name = "Email"
                        },
                        new
                        {
                            Pid = 54,
                            Code = "{{PhoneNumber}}",
                            Group = "CustomerOrder",
                            Name = "PhoneNumber"
                        },
                        new
                        {
                            Pid = 55,
                            Code = "{{Logo}}",
                            Group = "AdminOrder",
                            Name = "Logo"
                        },
                        new
                        {
                            Pid = 56,
                            Code = "{{Hotline}}",
                            Group = "AdminOrder",
                            Name = "Hotline"
                        },
                        new
                        {
                            Pid = 57,
                            Code = "{{CompanyName}}",
                            Group = "AdminOrder",
                            Name = "CompanyName"
                        },
                        new
                        {
                            Pid = 58,
                            Code = "{{DatetimeNow}}",
                            Group = "AdminOrder",
                            Name = "DatetimeNow"
                        },
                        new
                        {
                            Pid = 59,
                            Code = "{{FromName}}",
                            Group = "AdminOrder",
                            Name = "FromName"
                        },
                        new
                        {
                            Pid = 60,
                            Code = "{{FullName}}",
                            Group = "AdminOrder",
                            Name = "FullName"
                        },
                        new
                        {
                            Pid = 61,
                            Code = "{{Email}}",
                            Group = "AdminOrder",
                            Name = "Email"
                        },
                        new
                        {
                            Pid = 62,
                            Code = "{{PhoneNumber}}",
                            Group = "AdminOrder",
                            Name = "PhoneNumber"
                        },
                        new
                        {
                            Pid = 63,
                            Code = "{{CompanyAddress}}",
                            Group = "AdminOrder",
                            Name = "Address"
                        },
                        new
                        {
                            Pid = 64,
                            Code = "{{FirstName}}",
                            Group = "AdminOrder",
                            Name = "FirstName"
                        },
                        new
                        {
                            Pid = 65,
                            Code = "{{LastName}}",
                            Group = "AdminOrder",
                            Name = "LastName"
                        },
                        new
                        {
                            Pid = 66,
                            Code = "{{PhoneNumber}}",
                            Group = "AdminOrder",
                            Name = "PhoneNumber"
                        },
                        new
                        {
                            Pid = 67,
                            Code = "{{Email}}",
                            Group = "AdminOrder",
                            Name = "Email"
                        },
                        new
                        {
                            Pid = 68,
                            Code = "{{CustomerAddress}}",
                            Group = "AdminOrder",
                            Name = "CustomerAddress"
                        },
                        new
                        {
                            Pid = 69,
                            Code = "{{State}}",
                            Group = "AdminOrder",
                            Name = "State"
                        },
                        new
                        {
                            Pid = 70,
                            Code = "{{IsPayment}}",
                            Group = "AdminOrder",
                            Name = "IsPayment"
                        },
                        new
                        {
                            Pid = 71,
                            Code = "{{PaymentMethod}}",
                            Group = "AdminOrder",
                            Name = "PaymentMethod"
                        },
                        new
                        {
                            Pid = 72,
                            Code = "{{ShipFee}}",
                            Group = "AdminOrder",
                            Name = "ShipFee"
                        },
                        new
                        {
                            Pid = 73,
                            Code = "{{Deposit}}",
                            Group = "AdminOrder",
                            Name = "Deposit"
                        },
                        new
                        {
                            Pid = 74,
                            Code = "{{Total}}",
                            Group = "AdminOrder",
                            Name = "Total"
                        },
                        new
                        {
                            Pid = 75,
                            Code = "{{Note}}",
                            Group = "AdminOrder",
                            Name = "Note"
                        },
                        new
                        {
                            Pid = 79,
                            Code = "{{TableProductList}}",
                            Group = "AdminOrder",
                            Name = "TableProductList"
                        },
                        new
                        {
                            Pid = 80,
                            Code = "{{Logo}}",
                            Group = "AdminVAT",
                            Name = "Logo"
                        },
                        new
                        {
                            Pid = 81,
                            Code = "{{Hotline}}",
                            Group = "AdminVAT",
                            Name = "Hotline"
                        },
                        new
                        {
                            Pid = 82,
                            Code = "{{CompanyName}}",
                            Group = "AdminVAT",
                            Name = "CompanyName"
                        },
                        new
                        {
                            Pid = 83,
                            Code = "{{DatetimeNow}}",
                            Group = "AdminVAT",
                            Name = "DatetimeNow"
                        },
                        new
                        {
                            Pid = 84,
                            Code = "{{FromName}}",
                            Group = "AdminVAT",
                            Name = "FromName"
                        },
                        new
                        {
                            Pid = 85,
                            Code = "{{InvoiceCode}}",
                            Group = "AdminVAT",
                            Name = "InvoiceCode"
                        },
                        new
                        {
                            Pid = 86,
                            Code = "{{InvoiceCode}}",
                            Group = "AdminOrder",
                            Name = "InvoiceCode"
                        },
                        new
                        {
                            Pid = 87,
                            Code = "{{TemporaryPrice}}",
                            Group = "AdminOrder",
                            Name = "TemporaryPrice"
                        },
                        new
                        {
                            Pid = 88,
                            Code = "{{Logo}}",
                            Group = "EnquireToCustomer",
                            Name = "Logo"
                        },
                        new
                        {
                            Pid = 89,
                            Code = "{{Hotline}}",
                            Group = "EnquireToCustomer",
                            Name = "Hotline"
                        },
                        new
                        {
                            Pid = 90,
                            Code = "{{CompanyName}}",
                            Group = "EnquireToCustomer",
                            Name = "CompanyName"
                        },
                        new
                        {
                            Pid = 91,
                            Code = "{{DatetimeNow}}",
                            Group = "EnquireToCustomer",
                            Name = "DatetimeNow"
                        },
                        new
                        {
                            Pid = 92,
                            Code = "{{FromName}}",
                            Group = "EnquireToCustomer",
                            Name = "FromName"
                        },
                        new
                        {
                            Pid = 93,
                            Code = "{{ClientName}}",
                            Group = "EnquireToCustomer",
                            Name = "ClientName"
                        },
                        new
                        {
                            Pid = 94,
                            Code = "{{Logo}}",
                            Group = "EnquireToAdmin",
                            Name = "Logo"
                        },
                        new
                        {
                            Pid = 95,
                            Code = "{{Hotline}}",
                            Group = "EnquireToAdmin",
                            Name = "Hotline"
                        },
                        new
                        {
                            Pid = 96,
                            Code = "{{CompanyName}}",
                            Group = "EnquireToAdmin",
                            Name = "CompanyName"
                        },
                        new
                        {
                            Pid = 97,
                            Code = "{{DatetimeNow}}",
                            Group = "EnquireToAdmin",
                            Name = "DatetimeNow"
                        },
                        new
                        {
                            Pid = 98,
                            Code = "{{FromName}}",
                            Group = "EnquireToAdmin",
                            Name = "FromName"
                        },
                        new
                        {
                            Pid = 99,
                            Code = "{{FullName}}",
                            Group = "EnquireToAdmin",
                            Name = "FullName"
                        },
                        new
                        {
                            Pid = 100,
                            Code = "{{Email}}",
                            Group = "EnquireToAdmin",
                            Name = "Email"
                        },
                        new
                        {
                            Pid = 101,
                            Code = "{{PhoneNumber}}",
                            Group = "EnquireToAdmin",
                            Name = "PhoneNumber"
                        },
                        new
                        {
                            Pid = 102,
                            Code = "{{ServiceName}}",
                            Group = "EnquireToAdmin",
                            Name = "ServiceName"
                        },
                        new
                        {
                            Pid = 103,
                            Code = "{{Content}}",
                            Group = "EnquireToAdmin",
                            Name = "Content"
                        },
                        new
                        {
                            Pid = 104,
                            Code = "{{EnquireDate}}",
                            Group = "EnquireToAdmin",
                            Name = "EnquireDate"
                        },
                        new
                        {
                            Pid = 105,
                            Code = "{{Logo}}",
                            Group = "OrderToAdmin",
                            Name = "Logo"
                        },
                        new
                        {
                            Pid = 106,
                            Code = "{{Hotline}}",
                            Group = "OrderToAdmin",
                            Name = "Hotline"
                        },
                        new
                        {
                            Pid = 107,
                            Code = "{{CompanyName}}",
                            Group = "OrderToAdmin",
                            Name = "CompanyName"
                        },
                        new
                        {
                            Pid = 108,
                            Code = "{{DatetimeNow}}",
                            Group = "OrderToAdmin",
                            Name = "DatetimeNow"
                        },
                        new
                        {
                            Pid = 109,
                            Code = "{{FromName}}",
                            Group = "OrderToAdmin",
                            Name = "FromName"
                        },
                        new
                        {
                            Pid = 110,
                            Code = "{{FullName}}",
                            Group = "OrderToAdmin",
                            Name = "FullName"
                        },
                        new
                        {
                            Pid = 111,
                            Code = "{{Email}}",
                            Group = "OrderToAdmin",
                            Name = "Email"
                        },
                        new
                        {
                            Pid = 112,
                            Code = "{{PhoneNumber}}",
                            Group = "OrderToAdmin",
                            Name = "PhoneNumber"
                        },
                        new
                        {
                            Pid = 113,
                            Code = "{{CompanyAddress}}",
                            Group = "OrderToAdmin",
                            Name = "Address"
                        },
                        new
                        {
                            Pid = 114,
                            Code = "{{FirstName}}",
                            Group = "OrderToAdmin",
                            Name = "FirstName"
                        },
                        new
                        {
                            Pid = 115,
                            Code = "{{LastName}}",
                            Group = "OrderToAdmin",
                            Name = "LastName"
                        },
                        new
                        {
                            Pid = 116,
                            Code = "{{PhoneNumber}}",
                            Group = "OrderToAdmin",
                            Name = "PhoneNumber"
                        },
                        new
                        {
                            Pid = 117,
                            Code = "{{Email}}",
                            Group = "OrderToAdmin",
                            Name = "Email"
                        },
                        new
                        {
                            Pid = 118,
                            Code = "{{CustomerAddress}}",
                            Group = "OrderToAdmin",
                            Name = "CustomerAddress"
                        },
                        new
                        {
                            Pid = 119,
                            Code = "{{State}}",
                            Group = "OrderToAdmin",
                            Name = "State"
                        },
                        new
                        {
                            Pid = 120,
                            Code = "{{IsPayment}}",
                            Group = "OrderToAdmin",
                            Name = "IsPayment"
                        },
                        new
                        {
                            Pid = 121,
                            Code = "{{PaymentMethod}}",
                            Group = "OrderToAdmin",
                            Name = "PaymentMethod"
                        },
                        new
                        {
                            Pid = 122,
                            Code = "{{ShipFee}}",
                            Group = "OrderToAdmin",
                            Name = "ShipFee"
                        },
                        new
                        {
                            Pid = 123,
                            Code = "{{Deposit}}",
                            Group = "OrderToAdmin",
                            Name = "Deposit"
                        },
                        new
                        {
                            Pid = 124,
                            Code = "{{Total}}",
                            Group = "OrderToAdmin",
                            Name = "Total"
                        },
                        new
                        {
                            Pid = 125,
                            Code = "{{Note}}",
                            Group = "OrderToAdmin",
                            Name = "Note"
                        },
                        new
                        {
                            Pid = 129,
                            Code = "{{TableProductList}}",
                            Group = "OrderToAdmin",
                            Name = "TableProductList"
                        });
                });

            modelBuilder.Entity("CMS.Areas.Configurations.Models.EmailTemplate", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPlainText")
                        .HasColumnType("bit");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.ToTable("EmailTemplates");

                    b.HasData(
                        new
                        {
                            Pid = 1L,
                            Code = "EmailContactToAdmin",
                            Enabled = true,
                            Group = "ContactToAdmin",
                            IsPlainText = false,
                            Order = 0L,
                            Title = "Email gửi admin khi liên hệ"
                        },
                        new
                        {
                            Pid = 2L,
                            Code = "EmailContactToCustomer",
                            Enabled = true,
                            Group = "ContactToCustomer",
                            IsPlainText = false,
                            Order = 0L,
                            Title = "Email gửi khách hàng khi liên hệ"
                        },
                        new
                        {
                            Pid = 3L,
                            Code = "EmailActiveAccount",
                            Enabled = true,
                            Group = "ActiveAccount",
                            IsPlainText = false,
                            Order = 0L,
                            Title = "Email gửi khách hàng kích hoạt tài khoản khi khách hàng đăng ký"
                        },
                        new
                        {
                            Pid = 4L,
                            Code = "EmailForgotPassword",
                            Enabled = true,
                            Group = "ForgotPassword",
                            IsPlainText = false,
                            Order = 0L,
                            Title = "Email gửi khách hàng khi khách hàng quên mật khẩu"
                        },
                        new
                        {
                            Pid = 5L,
                            Code = "EmailRecruitToAdmin",
                            Enabled = false,
                            Group = "RecruitToAdmin",
                            IsPlainText = false,
                            Order = 0L,
                            Title = "Email gửi admin khi người dùng ứng tuyển "
                        },
                        new
                        {
                            Pid = 6L,
                            Code = "EmailRecruitToCustomer",
                            Enabled = false,
                            Group = "RecruitToCustomer",
                            IsPlainText = false,
                            Order = 0L,
                            Title = "Email gửi người dùng khi ứng tuyển"
                        },
                        new
                        {
                            Pid = 7L,
                            Code = "EmailCustomerOrder",
                            Enabled = true,
                            Group = "CustomerOrder",
                            IsPlainText = false,
                            Order = 0L,
                            Title = "Email gửi khách hàng đi ấn nút đặt hàng"
                        },
                        new
                        {
                            Pid = 8L,
                            Code = "EmailAdminOrder",
                            Enabled = true,
                            Group = "AdminOrder",
                            IsPlainText = false,
                            Order = 0L,
                            Title = "Email gửi khách hàng khi ấn nút send mail trong admin"
                        },
                        new
                        {
                            Pid = 9L,
                            Code = "EmailAdminVAT",
                            Enabled = true,
                            Group = "AdminVAT",
                            IsPlainText = false,
                            Order = 0L,
                            Title = "Email gửi khách hàng VAT"
                        },
                        new
                        {
                            Pid = 10L,
                            Code = "EmailEnquireToAdmin",
                            Enabled = false,
                            Group = "EnquireToAdmin",
                            IsPlainText = false,
                            Order = 0L,
                            Title = "Email gửi admin khi đặt lịch hẹn"
                        },
                        new
                        {
                            Pid = 11L,
                            Code = "EmailEnquireToCustomer",
                            Enabled = false,
                            Group = "EnquireToCustomer",
                            IsPlainText = false,
                            Order = 0L,
                            Title = "Email gửi khách hàng khi đặt lịch hẹn"
                        },
                        new
                        {
                            Pid = 12L,
                            Code = "EmailOrderToAdmin",
                            Enabled = true,
                            Group = "OrderToAdmin",
                            IsPlainText = false,
                            Order = 0L,
                            Title = "Email gửi admin khi khách đặt hàng"
                        });
                });

            modelBuilder.Entity("CMS.Areas.Configurations.Models.MultiLang_EmailTemplate", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EmailTemplatePid")
                        .HasColumnType("bigint");

                    b.Property<string>("FromName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("EmailTemplatePid");

                    b.ToTable("MultiLang_EmailTemplates");

                    b.HasData(
                        new
                        {
                            Pid = 1L,
                            Content = "<div class=\"tt\"><div class=\"tt\">Xin chào <strong><span class=\"pull - right\"><a class=\"add_merge_field text - primary \" role=\"button\"> {{FromName}},</a></span></strong></div><p>Có <strong>01 </strong>yêu cầu được gửi tới website!</p><ul><li>Tên Khách hàng: {{FullName}}</li><li>Email: {{Email}}</li><li>Số điện thoại: {{PhoneNumber}}</li><li>Tiêu đề: {{Title}}</li><li>Nội dung: {{Content}}</li></ul><hr><div class=\"small text - muted note\">* Đây là email trả lời tự động, vui lòng không trả lời thư này.</div></div>",
                            EmailTemplatePid = 1L,
                            FromName = "{{FromName}}",
                            LangKey = "vi",
                            Subject = "Có 1 yêu cầu hỗ trợ"
                        },
                        new
                        {
                            Pid = 2L,
                            Content = "<div class=\"tt\">Hello<strong><span class=\"pull - right\"><a class=\"add_merge_field text - primary \" role=\"button\"> {{FromName}} </a></span></strong></div><p>There is <strong>01</strong> request sent to the website!</p><ul><li>Customer name: {{FullName}}</li><li>Email: {{Email}}</li><li>Phone number: {{PhoneNumber}}</li><li>Title: {{Title}}</li><li>Content: {{Content}}</li></ul><hr><div class=\"small text - muted note\">* This is an autoresponder email, please do not reply to this message.</div>",
                            EmailTemplatePid = 1L,
                            FromName = "{{FromName}}",
                            LangKey = "en",
                            Subject = "There is 1 request for support"
                        },
                        new
                        {
                            Pid = 3L,
                            Content = "<div class=\"tt\">Xin chào <strong><span class=\"pull - right\"> <a class=\"add_merge_field text - primary \" role=\"button\"> {{ClientName}},</a></span></strong></div><div class=\"tt\">Cảm ơn bạn đã liên hệ, chúng tôi sẽ trả lời bạn sớm nhất có thể.</div><hr><div class=\"small text - muted note\">* Đây là email trả lời tự động, vui lòng không trả lời thư này.</div>",
                            EmailTemplatePid = 2L,
                            FromName = "{{FromName}}",
                            LangKey = "vi",
                            Subject = "Cảm ơn bạn đã liên hệ"
                        },
                        new
                        {
                            Pid = 4L,
                            Content = "<div class=\"tt\">Dear<strong><span class=\"pull - right\">&nbsp;<a class=\"add_merge_field text - primary \" style=\"text - decoration: none; \" role=\"button\" data-mce-style=\"text - decoration: none; \">{{ClientName}},</a></span></strong></div><div class=\"tt\">Thank you for your contact, we will reply to you as soon as possible.</div><hr><div class=\"small text-muted note\">* This is an autoresponder email, please do not reply to this message.</div>",
                            EmailTemplatePid = 2L,
                            FromName = "{{FromName}}",
                            LangKey = "en",
                            Subject = "Thank you for contacting!"
                        },
                        new
                        {
                            Pid = 5L,
                            Content = "<a href='{{LinkActiveAccount}}'>Xác nhận tài khoản</a>",
                            EmailTemplatePid = 3L,
                            FromName = "{{FromName}}",
                            LangKey = "vi",
                            Subject = "Xác nhận tài khoản - {{FromName}}"
                        },
                        new
                        {
                            Pid = 6L,
                            EmailTemplatePid = 3L,
                            FromName = "",
                            LangKey = "en",
                            Subject = ""
                        },
                        new
                        {
                            Pid = 7L,
                            Content = "Mật khẩu mới của bạn là: {{NewPassword}}",
                            EmailTemplatePid = 4L,
                            FromName = "{{FromName}}",
                            LangKey = "vi",
                            Subject = "Quên mật khẩu - {{FromName}}"
                        },
                        new
                        {
                            Pid = 8L,
                            EmailTemplatePid = 4L,
                            FromName = "",
                            LangKey = "en",
                            Subject = ""
                        },
                        new
                        {
                            Pid = 9L,
                            Content = "{FullName}} {{Email}} {{PhoneNumber}} {{Title}} {{Content}} {{Job}}",
                            EmailTemplatePid = 5L,
                            FromName = "{{FromName}}",
                            LangKey = "vi",
                            Subject = "Có 1 yêu cầu tuyển dụng - {{FromName}}"
                        },
                        new
                        {
                            Pid = 10L,
                            EmailTemplatePid = 5L,
                            FromName = "",
                            LangKey = "en",
                            Subject = ""
                        },
                        new
                        {
                            Pid = 11L,
                            Content = "Cảm ơn bạn đã ứng tuyển , chúng tôi sẽ trả lời bạn sớm nhất có thể.",
                            EmailTemplatePid = 6L,
                            FromName = "{{FromName}}",
                            LangKey = "vi",
                            Subject = "Tuyển dụng - {{FromName}}"
                        },
                        new
                        {
                            Pid = 12L,
                            EmailTemplatePid = 6L,
                            FromName = "",
                            LangKey = "en",
                            Subject = ""
                        },
                        new
                        {
                            Pid = 13L,
                            Content = "Cảm ơn bạn đã đặt hàng , chúng tôi sẽ trả lời bạn sớm nhất có thể.",
                            EmailTemplatePid = 7L,
                            FromName = "{{FromName}}",
                            LangKey = "vi",
                            Subject = "Cảm ơn bạn đã đặt hàng - {{FromName}}"
                        },
                        new
                        {
                            Pid = 14L,
                            EmailTemplatePid = 7L,
                            FromName = "",
                            LangKey = "en",
                            Subject = ""
                        },
                        new
                        {
                            Pid = 15L,
                            Content = "Xác nhận đơn hàng , chúng tôi sẽ trả lời bạn sớm nhất có thể.",
                            EmailTemplatePid = 8L,
                            FromName = "{{FromName}}",
                            LangKey = "vi",
                            Subject = "Xác nhận đơn hàng - {{FromName}}"
                        },
                        new
                        {
                            Pid = 16L,
                            EmailTemplatePid = 8L,
                            FromName = "",
                            LangKey = "en",
                            Subject = ""
                        },
                        new
                        {
                            Pid = 17L,
                            Content = "Chúng tôi gửi bạn VAT cho mã đơn hàng {{InvoiceCode}}",
                            EmailTemplatePid = 9L,
                            FromName = "{{FromName}}",
                            LangKey = "vi",
                            Subject = "Xuất VAT - {{FromName}}"
                        },
                        new
                        {
                            Pid = 18L,
                            EmailTemplatePid = 9L,
                            FromName = "",
                            LangKey = "en",
                            Subject = ""
                        },
                        new
                        {
                            Pid = 19L,
                            Content = "<div class=\"tt\"><div class=\"tt\">Xin chào <strong><span class=\"pull - right\"><a class=\"add_merge_field text - primary \" role=\"button\"> {{FromName}},</a></span></strong></div><p>Có <strong>01 </strong>yêu cầu được gửi tới website!</p><ul><li>Tên Khách hàng: {{FullName}}</li><li>Email: {{Email}}</li><li>Số điện thoại: {{PhoneNumber}}</li><li>Dịch vụ: {{ServiceName}}</li><li>Ngày đặt lịch hẹn: {{EnquireDate}}</li><li>Nội dung: {{Content}}</li></ul><hr><div class=\"small text - muted note\">* Đây là email trả lời tự động, vui lòng không trả lời thư này.</div></div>",
                            EmailTemplatePid = 10L,
                            FromName = "{{FromName}}",
                            LangKey = "vi",
                            Subject = "Có 1 khách hàng đặt lịch hẹn"
                        },
                        new
                        {
                            Pid = 20L,
                            Content = "<div class=\"tt\">Hello<strong><span class=\"pull - right\"><a class=\"add_merge_field text - primary \" role=\"button\"> {{FromName}} </a></span></strong></div><p>There is <strong>01</strong> request sent to the website!</p><ul><li>Customer name: {{FullName}}</li><li>Email: {{Email}}</li><li>Phone number: {{PhoneNumber}}</li><li>Service: {{ServiceName}}</li><li>Appointment date: {{EnquireDate}}</li><li>Content: {{Content}}</li></ul><hr><div class=\"small text - muted note\">* This is an autoresponder email, please do not reply to this message.</div>",
                            EmailTemplatePid = 10L,
                            FromName = "{{FromName}}",
                            LangKey = "en",
                            Subject = "There is 1 customer who has booked an appointment"
                        },
                        new
                        {
                            Pid = 21L,
                            Content = "<div class=\"tt\">Xin chào <strong><span class=\"pull - right\"> <a class=\"add_merge_field text - primary \" role=\"button\"> {{ClientName}},</a></span></strong></div><div class=\"tt\">Cảm ơn bạn đã đặt lịch hẹn, chúng tôi sẽ trả lời bạn sớm nhất có thể.</div><hr><div class=\"small text - muted note\">* Đây là email trả lời tự động, vui lòng không trả lời thư này.</div>",
                            EmailTemplatePid = 11L,
                            FromName = "{{FromName}}",
                            LangKey = "vi",
                            Subject = "Cảm ơn bạn đã đặt lịch hẹn"
                        },
                        new
                        {
                            Pid = 22L,
                            Content = "<div class=\"tt\">Dear<strong><span class=\"pull - right\">&nbsp;<a class=\"add_merge_field text - primary \" style=\"text - decoration: none; \" role=\"button\" data-mce-style=\"text - decoration: none; \">{{ClientName}},</a></span></strong></div><div class=\"tt\">Thank you for your contact, we will reply to you as soon as possible.</div><hr><div class=\"small text-muted note\">* This is an autoresponder email, please do not reply to this message.</div>",
                            EmailTemplatePid = 11L,
                            FromName = "{{FromName}}",
                            LangKey = "en",
                            Subject = "Thank you for scheduling your appointment!"
                        },
                        new
                        {
                            Pid = 23L,
                            Content = "<div class=\"e - body\"> <div class=\"tt\">Xin ch&agrave;o <strong><span class=\"pull - right\"><a class=\"add_merge_field text - primary \" role=\"button\"> {{FromName}},</a></span></strong></div> <p>C&oacute; <strong>01 </strong>đơn h&agrave;ng mới!</p> <hr /> <div class=\"mb - 3 fs - 14\"> <div class=\"tt tt - color uppercase border - bottom fs - 14\">Th&ocirc;ng tin đơn h&agrave;ng {{InvoiceCode}} <span class=\"small fw - normal uppercase - none text - body\">({{DatetimeNow}})</span></div> <table class=\"w - 100 mb - 2\"> <tbody> <tr> <td class=\"col - 6 align - top\" style=\"width: 199px; \"> <p><strong>Th&ocirc;ng tin thanh to&aacute;n</strong></p> <p>{{FullName}}</p> <p>{{Email}}</p> <p>{{PhoneNumber}}</p> </td> <td class=\"col - 6 align - top\" style=\"width: 199px; \"> <p><strong>Địa chỉ giao h&agrave;ng</strong></p> <p>{{FullName}}</p> <p>{{CustomerAddress}}</p> <p>{{PhoneNumber}}</p> </td> </tr> </tbody> </table> <p><strong>Phương thức thanh to&aacute;n: </strong>{{PaymentMethod}}</p> <div class=\"tt tt-color uppercase border-bottom fs - 14\">Chi tiết đơn h&agrave;ng</div> <div class=\"tt tt-color uppercase border-bottom fs - 14\">{{TableProductList}}</div> <table class=\"table - invoid fs - 14 mb - 2\" style=\"height: 88px; \"> <tbody> <tr class=\"bg - light fw - bold text - red\" style=\"height: 22px; \"> <td class=\"td p-sm text - right\" style=\"width: 499.344px; height: 22px; \" colspan=\"4\">Tổng gi&aacute; trị đơn h&agrave;ng</td> <td class=\"td p-sm text - right\" style=\"width: 94px; height: 22px; \">{{Total}} đ</td> </tr> </tbody> </table> </div> </div>",
                            EmailTemplatePid = 12L,
                            FromName = "{{FromName}}",
                            LangKey = "vi",
                            Subject = "Có 01 đơn hàng mới"
                        },
                        new
                        {
                            Pid = 24L,
                            Content = "<div class=\"e-body\"> <div class=\"tt\">Hello <strong><span class=\"pull-right\"><a class=\"add_merge_field text-primary\" role=\"button\"> {{FromName}},</a></span></strong></div> <p>You have <strong>01 </strong>new order!</p> <hr /> <div class=\"mb-3 fs-14\"> <div class=\"tt tt-color uppercase border-bottom fs-14\">Order Information {{InvoiceCode}} <span class=\"small fw-normal uppercase-none text-body\">({{DatetimeNow}})</span></div> <table class=\"w-100 mb-2\"> <tbody> <tr> <td class=\"col-6 align-top\" style=\"width: 199px; \"> <p><strong>Payment Information</strong></p> <p>{{FullName}}</p> <p>{{Email}}</p> <p>{{PhoneNumber}}</p> </td> <td class=\"col-6 align-top\" style=\"width: 199px; \"> <p><strong>Shipping Address</strong></p> <p>{{FullName}}</p> <p>{{CustomerAddress}}</p> <p>{{PhoneNumber}}</p> </td> </tr> </tbody> </table> <p><strong>Payment Method: </strong>{{PaymentMethod}}</p> <div class=\"tt tt-color uppercase border-bottom fs-14\">Order Details</div> <div class=\"tt tt-color uppercase border-bottom fs-14\">{{TableProductList}}</div> <table class=\"table-invoid fs-14 mb-2\" style=\"height: 88px; \"> <tbody> <tr class=\"bg-light fw-bold text-red\" style=\"height: 22px; \"> <td class=\"td p-sm text-right\" style=\"width: 499.344px; height: 22px; \" colspan=\"4\">Total Order Value</td> <td class=\"td p-sm text-right\" style=\"width: 94px; height: 22px; \">{{Total}} đ</td> </tr> </tbody> </table> </div> </div>",
                            EmailTemplatePid = 12L,
                            FromName = "{{FromName}}",
                            LangKey = "en",
                            Subject = "New Order Notification"
                        });
                });

            modelBuilder.Entity("CMS.Areas.Contact.Models.Branch", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Pid");

                    b.ToTable("Branchs");
                });

            modelBuilder.Entity("CMS.Areas.Contact.Models.ContactInfo", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isMultiLang")
                        .HasColumnType("bit");

                    b.HasKey("Pid");

                    b.ToTable("ContactInfos");

                    b.HasData(
                        new
                        {
                            Pid = 1L,
                            Code = "contact-companyName",
                            Type = "text",
                            isMultiLang = true
                        },
                        new
                        {
                            Pid = 2L,
                            Code = "contact-address",
                            Type = "text",
                            isMultiLang = true
                        },
                        new
                        {
                            Pid = 3L,
                            Code = "contact-tel",
                            Type = "text",
                            isMultiLang = false
                        },
                        new
                        {
                            Pid = 4L,
                            Code = "contact-fax",
                            Type = "text",
                            isMultiLang = false
                        },
                        new
                        {
                            Pid = 5L,
                            Code = "contact-hotline",
                            Type = "text",
                            isMultiLang = false
                        },
                        new
                        {
                            Pid = 6L,
                            Code = "contact-noted",
                            Type = "text",
                            isMultiLang = true
                        },
                        new
                        {
                            Pid = 7L,
                            Code = "contact-map",
                            Type = "text",
                            isMultiLang = false
                        },
                        new
                        {
                            Pid = 8L,
                            Code = "contact-email",
                            Type = "text",
                            isMultiLang = false
                        },
                        new
                        {
                            Pid = 9L,
                            Code = "contact-time",
                            Type = "text",
                            isMultiLang = true
                        },
                        new
                        {
                            Pid = 10L,
                            Code = "contact-intro",
                            Type = "text",
                            isMultiLang = true
                        });
                });

            modelBuilder.Entity("CMS.Areas.Contact.Models.ContactList", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RecivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("isHidden")
                        .HasColumnType("bit");

                    b.Property<bool>("isRead")
                        .HasColumnType("bit");

                    b.HasKey("Pid");

                    b.ToTable("ContactLists");
                });

            modelBuilder.Entity("CMS.Areas.Contact.Models.EnquireList", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentEnquire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateEnquire")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailEnquire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNameEnquire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneEnquire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RecivedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ServiceDetailPid")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("isHidden")
                        .HasColumnType("bit");

                    b.Property<bool>("isRead")
                        .HasColumnType("bit");

                    b.HasKey("Pid");

                    b.HasIndex("ServiceDetailPid");

                    b.ToTable("EnquireLists");
                });

            modelBuilder.Entity("CMS.Areas.Contact.Models.MultiLang_Branch", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchPid")
                        .HasColumnType("int");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("BranchPid");

                    b.ToTable("MultiLang_Branchs");
                });

            modelBuilder.Entity("CMS.Areas.Contact.Models.MultiLang_ContactInfo", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ContactInfoID")
                        .HasColumnType("bigint");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("ContactInfoID");

                    b.ToTable("MultiLang_ContactInfos");
                });

            modelBuilder.Entity("CMS.Areas.Convenience.Models.Convenience", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.ToTable("Conveniences");
                });

            modelBuilder.Entity("CMS.Areas.Convenience.Models.MultiLang_Convenience", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConveniencePid")
                        .HasColumnType("int");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("ConveniencePid");

                    b.ToTable("MultiLang_Conveniences");
                });

            modelBuilder.Entity("CMS.Areas.Customer.Models.Customer", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActivationCode")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CodeExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("DateOfBirth")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacebookId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MonthOfBirth")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.Property<string>("PicThumb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("Ward")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YearOfBirth")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Zalo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CMS.Areas.FAQ.Models.FAQCate", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("ParentRoute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("isLocked")
                        .HasColumnType("bit");

                    b.HasKey("Pid");

                    b.ToTable("FAQCates");

                    b.HasData(
                        new
                        {
                            Pid = 1L,
                            Code = "/",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 44, DateTimeKind.Local).AddTicks(6988),
                            Deleted = false,
                            Enabled = true,
                            LastLogin = new DateTime(2024, 7, 4, 19, 55, 8, 44, DateTimeKind.Local).AddTicks(6997),
                            Order = 0L,
                            ParentId = 0,
                            isLocked = true
                        });
                });

            modelBuilder.Entity("CMS.Areas.FAQ.Models.FAQCate_FAQDetail", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FAQCatePid")
                        .HasColumnType("bigint");

                    b.Property<long>("FAQDetailPid")
                        .HasColumnType("bigint");

                    b.HasKey("Pid");

                    b.HasIndex("FAQCatePid");

                    b.HasIndex("FAQDetailPid");

                    b.ToTable("FAQCate_FAQDetails");
                });

            modelBuilder.Entity("CMS.Areas.FAQ.Models.FAQDetail", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CounterView")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHot")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<string>("PicThumb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SlugTagKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Pid");

                    b.ToTable("FAQDetails");
                });

            modelBuilder.Entity("CMS.Areas.FAQ.Models.Images_FAQ", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FAQDetailPid")
                        .HasColumnType("bigint");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.HasKey("Pid");

                    b.HasIndex("FAQDetailPid");

                    b.ToTable("Images_FAQs");
                });

            modelBuilder.Entity("CMS.Areas.FAQ.Models.MultiLang_FAQCate", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FAQCatePid")
                        .HasColumnType("bigint");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("FAQCatePid");

                    b.ToTable("MultiLang_FAQCates");
                });

            modelBuilder.Entity("CMS.Areas.FAQ.Models.MultiLang_FAQDetail", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionSEO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FAQCatePid")
                        .HasColumnType("bigint");

                    b.Property<long>("FAQDetailPid")
                        .HasColumnType("bigint");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleSEO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleWithoutSign")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("FAQCatePid");

                    b.HasIndex("FAQDetailPid");

                    b.ToTable("MultiLang_FAQDetails");
                });

            modelBuilder.Entity("CMS.Areas.FAQ.Models.MultiLang_Images_FAQ", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ImagesFAQPid")
                        .HasColumnType("bigint");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("ImagesFAQPid");

                    b.ToTable("MultiLang_Images_FAQs");
                });

            modelBuilder.Entity("CMS.Areas.Feature.Models.FeatureCate", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("ParentRoute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("isLocked")
                        .HasColumnType("bit");

                    b.HasKey("Pid");

                    b.ToTable("FeatureCates");

                    b.HasData(
                        new
                        {
                            Pid = 1L,
                            Code = "/",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 45, DateTimeKind.Local).AddTicks(1966),
                            Deleted = false,
                            Enabled = true,
                            LastLogin = new DateTime(2024, 7, 4, 19, 55, 8, 45, DateTimeKind.Local).AddTicks(1975),
                            Order = 0L,
                            ParentId = 0,
                            isLocked = true
                        });
                });

            modelBuilder.Entity("CMS.Areas.Feature.Models.FeatureCate_FeatureDetail", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FeatureCatePid")
                        .HasColumnType("bigint");

                    b.Property<long>("FeatureDetailPid")
                        .HasColumnType("bigint");

                    b.HasKey("Pid");

                    b.HasIndex("FeatureCatePid");

                    b.HasIndex("FeatureDetailPid");

                    b.ToTable("FeatureCate_FeatureDetails");
                });

            modelBuilder.Entity("CMS.Areas.Feature.Models.FeatureDetail", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CounterView")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHot")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<string>("PicThumb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SlugTagKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Pid");

                    b.ToTable("FeatureDetails");
                });

            modelBuilder.Entity("CMS.Areas.Feature.Models.Images_Feature", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FeatureDetailPid")
                        .HasColumnType("bigint");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.HasKey("Pid");

                    b.HasIndex("FeatureDetailPid");

                    b.ToTable("Images_Features");
                });

            modelBuilder.Entity("CMS.Areas.Feature.Models.MultiLang_FeatureCate", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FeatureCatePid")
                        .HasColumnType("bigint");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("FeatureCatePid");

                    b.ToTable("MultiLang_FeatureCates");
                });

            modelBuilder.Entity("CMS.Areas.Feature.Models.MultiLang_FeatureDetail", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionSEO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FeatureCatePid")
                        .HasColumnType("bigint");

                    b.Property<long>("FeatureDetailPid")
                        .HasColumnType("bigint");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleSEO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleWithoutSign")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("FeatureCatePid");

                    b.HasIndex("FeatureDetailPid");

                    b.ToTable("MultiLang_FeatureDetails");
                });

            modelBuilder.Entity("CMS.Areas.Feature.Models.MultiLang_Images_Feature", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ImagesFeaturePid")
                        .HasColumnType("bigint");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("ImagesFeaturePid");

                    b.ToTable("MultiLang_Images_Features");
                });

            modelBuilder.Entity("CMS.Areas.Gallery.Models.GalleryCate", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("ParentRoute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("isLocked")
                        .HasColumnType("bit");

                    b.HasKey("Pid");

                    b.ToTable("GalleryCates");

                    b.HasData(
                        new
                        {
                            Pid = 1L,
                            Code = "/",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 43, DateTimeKind.Local).AddTicks(6912),
                            Deleted = false,
                            Enabled = true,
                            LastLogin = new DateTime(2024, 7, 4, 19, 55, 8, 43, DateTimeKind.Local).AddTicks(6921),
                            Order = 0L,
                            ParentId = 0,
                            isLocked = true
                        });
                });

            modelBuilder.Entity("CMS.Areas.Gallery.Models.GalleryCate_GalleryDetail", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("GalleryCatePid")
                        .HasColumnType("bigint");

                    b.Property<long>("GalleryDetailPid")
                        .HasColumnType("bigint");

                    b.HasKey("Pid");

                    b.HasIndex("GalleryCatePid");

                    b.HasIndex("GalleryDetailPid");

                    b.ToTable("GalleryCate_GalleryDetails");
                });

            modelBuilder.Entity("CMS.Areas.Gallery.Models.GalleryDetail", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CounterView")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHot")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<string>("PicThumb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SlugTagKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("VideoLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.ToTable("GalleryDetails");
                });

            modelBuilder.Entity("CMS.Areas.Gallery.Models.Images_Gallery", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("GalleryDetailPid")
                        .HasColumnType("bigint");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.HasKey("Pid");

                    b.HasIndex("GalleryDetailPid");

                    b.ToTable("Images_Galleries");
                });

            modelBuilder.Entity("CMS.Areas.Gallery.Models.MultiLang_GalleryCate", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("GalleryCatePid")
                        .HasColumnType("bigint");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("GalleryCatePid");

                    b.ToTable("MultiLang_GalleryCates");
                });

            modelBuilder.Entity("CMS.Areas.Gallery.Models.MultiLang_GalleryDetail", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionSEO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("GalleryCatePid")
                        .HasColumnType("bigint");

                    b.Property<long>("GalleryDetailPid")
                        .HasColumnType("bigint");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleSEO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleWithoutSign")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("GalleryCatePid");

                    b.HasIndex("GalleryDetailPid");

                    b.ToTable("MultiLang_GalleryDetails");
                });

            modelBuilder.Entity("CMS.Areas.Gallery.Models.MultiLang_Images_Gallery", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ImagesGalleryPid")
                        .HasColumnType("bigint");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("ImagesGalleryPid");

                    b.ToTable("MultiLang_Images_Galleries");
                });

            modelBuilder.Entity("CMS.Areas.HomePage.Models.HomePage", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Pid");

                    b.ToTable("HomePages");
                });

            modelBuilder.Entity("CMS.Areas.HomePage.Models.MultiLang_HomePage", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HomePagePid")
                        .HasColumnType("int");

                    b.Property<string>("IntroLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("HomePagePid");

                    b.ToTable("MultiLang_HomePages");
                });

            modelBuilder.Entity("CMS.Areas.News.Models.Images_News", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("NewsDetailPid")
                        .HasColumnType("bigint");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.HasKey("Pid");

                    b.HasIndex("NewsDetailPid");

                    b.ToTable("Images_Newses");
                });

            modelBuilder.Entity("CMS.Areas.News.Models.MultiLang_Images_News", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ImagesNewsPid")
                        .HasColumnType("bigint");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("ImagesNewsPid");

                    b.ToTable("MultiLang_Images_Newses");
                });

            modelBuilder.Entity("CMS.Areas.News.Models.MultiLang_NewsCate", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("NewsCatePid")
                        .HasColumnType("bigint");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("NewsCatePid");

                    b.ToTable("MultiLang_NewsCates");
                });

            modelBuilder.Entity("CMS.Areas.News.Models.MultiLang_NewsDetail", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionSEO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("NewsCatePid")
                        .HasColumnType("bigint");

                    b.Property<long>("NewsDetailPid")
                        .HasColumnType("bigint");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleSEO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleWithoutSign")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("NewsCatePid");

                    b.HasIndex("NewsDetailPid");

                    b.ToTable("MultiLang_NewsDetails");
                });

            modelBuilder.Entity("CMS.Areas.News.Models.NewsCate", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("ParentRoute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("isLocked")
                        .HasColumnType("bit");

                    b.HasKey("Pid");

                    b.ToTable("NewsCates");

                    b.HasData(
                        new
                        {
                            Pid = 1L,
                            Code = "/",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 43, DateTimeKind.Local).AddTicks(1752),
                            Deleted = false,
                            Enabled = true,
                            LastLogin = new DateTime(2024, 7, 4, 19, 55, 8, 43, DateTimeKind.Local).AddTicks(1761),
                            Order = 0L,
                            ParentId = 0,
                            isLocked = true
                        });
                });

            modelBuilder.Entity("CMS.Areas.News.Models.NewsCate_NewsDetail", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("NewsCatePid")
                        .HasColumnType("bigint");

                    b.Property<long>("NewsDetailPid")
                        .HasColumnType("bigint");

                    b.HasKey("Pid");

                    b.HasIndex("NewsCatePid");

                    b.HasIndex("NewsDetailPid");

                    b.ToTable("NewsCate_NewsDetails");
                });

            modelBuilder.Entity("CMS.Areas.News.Models.NewsDetail", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CounterView")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHot")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<string>("PicThumb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SlugTagKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Pid");

                    b.ToTable("NewsDetails");
                });

            modelBuilder.Entity("CMS.Areas.Order.Models.Order", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("BackgroundPid")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<long>("CustomerPid")
                        .HasColumnType("bigint");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Deposit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPayment")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<long>("ProductCatePid")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductDetailPid")
                        .HasColumnType("bigint");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ShipFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("TaxCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("VAT")
                        .HasColumnType("bit");

                    b.Property<string>("Ward")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CMS.Areas.Order.Models.OrderDetail", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ColorId")
                        .HasColumnType("bigint");

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyWebsiteLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("CustomLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OptionId")
                        .HasColumnType("bigint");

                    b.Property<string>("OptionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrderPid")
                        .HasColumnType("bigint");

                    b.Property<string>("PersonalEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalWebsiteLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductDetailPid")
                        .HasColumnType("bigint");

                    b.Property<string>("QrImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QrLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Skype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telegram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Viber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsApp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zalo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("OrderPid");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("CMS.Areas.Order.Models.OrderImages", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrderPid")
                        .HasColumnType("bigint");

                    b.HasKey("Pid");

                    b.ToTable("OrderImages");
                });

            modelBuilder.Entity("CMS.Areas.Popup.Models.MultiLang_Popup", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmbedCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PopupPid")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("PopupPid");

                    b.ToTable("MultiLang_Popups");
                });

            modelBuilder.Entity("CMS.Areas.Popup.Models.Popup", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<int>("DelayTime")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DisplayType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Pid");

                    b.ToTable("Popups");
                });

            modelBuilder.Entity("CMS.Areas.Popup.Models.Popup_Page", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.Property<int>("PopupPid")
                        .HasColumnType("int");

                    b.HasKey("Pid");

                    b.HasIndex("PageId");

                    b.HasIndex("PopupPid");

                    b.ToTable("Popup_Pages");
                });

            modelBuilder.Entity("CMS.Areas.Product.Models.Images_Product", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductDetailPid")
                        .HasColumnType("bigint");

                    b.HasKey("Pid");

                    b.HasIndex("ProductDetailPid");

                    b.ToTable("Images_Products");
                });

            modelBuilder.Entity("CMS.Areas.Product.Models.MultiLang_Images_Product", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ImagesProductPid")
                        .HasColumnType("bigint");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("ImagesProductPid");

                    b.ToTable("MultiLang_Images_Products");
                });

            modelBuilder.Entity("CMS.Areas.Product.Models.MultiLang_ProductCate", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProductCatePid")
                        .HasColumnType("bigint");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("ProductCatePid");

                    b.ToTable("MultiLang_ProductCates");

                    b.HasData(
                        new
                        {
                            Pid = 1L,
                            LangKey = "vi",
                            Name = "1 tháng",
                            ProductCatePid = 2L
                        },
                        new
                        {
                            Pid = 2L,
                            LangKey = "en",
                            Name = "1 month",
                            ProductCatePid = 2L
                        },
                        new
                        {
                            Pid = 3L,
                            LangKey = "vi",
                            Name = "6 tháng",
                            ProductCatePid = 3L
                        },
                        new
                        {
                            Pid = 4L,
                            LangKey = "en",
                            Name = "6 month",
                            ProductCatePid = 3L
                        },
                        new
                        {
                            Pid = 5L,
                            LangKey = "vi",
                            Name = "9 tháng",
                            ProductCatePid = 4L
                        },
                        new
                        {
                            Pid = 6L,
                            LangKey = "en",
                            Name = "9 month",
                            ProductCatePid = 4L
                        },
                        new
                        {
                            Pid = 7L,
                            LangKey = "vi",
                            Name = "18 tháng",
                            ProductCatePid = 5L
                        },
                        new
                        {
                            Pid = 8L,
                            LangKey = "en",
                            Name = "18 month",
                            ProductCatePid = 5L
                        });
                });

            modelBuilder.Entity("CMS.Areas.Product.Models.MultiLang_ProductColor", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProductColorPid")
                        .HasColumnType("bigint");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("ProductColorPid");

                    b.ToTable("MultiLang_ProductColors");

                    b.HasData(
                        new
                        {
                            Pid = 1L,
                            Description = "",
                            LangKey = "vi",
                            Name = "Mặc định",
                            ProductColorPid = 1L,
                            Slug = "default"
                        },
                        new
                        {
                            Pid = 2L,
                            Description = "",
                            LangKey = "en",
                            Name = "Default",
                            ProductColorPid = 1L,
                            Slug = "default"
                        });
                });

            modelBuilder.Entity("CMS.Areas.Product.Models.MultiLang_ProductDetail", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionSEO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Material")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProductDetailPid")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleSEO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleWithoutSign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("ProductDetailPid");

                    b.ToTable("MultiLang_ProductDetails");
                });

            modelBuilder.Entity("CMS.Areas.Product.Models.MultiLang_ProductOption", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProductOptionPid")
                        .HasColumnType("bigint");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("ProductOptionPid");

                    b.ToTable("MultiLang_ProductOptions");

                    b.HasData(
                        new
                        {
                            Pid = 1L,
                            Description = "",
                            LangKey = "vi",
                            Name = "Default",
                            ProductOptionPid = 1L,
                            Slug = "default"
                        },
                        new
                        {
                            Pid = 2L,
                            Description = "",
                            LangKey = "en",
                            Name = "Default",
                            ProductOptionPid = 1L,
                            Slug = "default"
                        });
                });

            modelBuilder.Entity("CMS.Areas.Product.Models.ProductCate", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowHome")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<int>("Months")
                        .HasColumnType("int");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("ParentRoute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PicThumb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("isLocked")
                        .HasColumnType("bit");

                    b.HasKey("Pid");

                    b.ToTable("ProductCates");

                    b.HasData(
                        new
                        {
                            Pid = 1L,
                            Code = "/",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 46, DateTimeKind.Local).AddTicks(3941),
                            Deleted = false,
                            Enabled = true,
                            IsShowHome = false,
                            LastLogin = new DateTime(2024, 7, 4, 19, 55, 8, 46, DateTimeKind.Local).AddTicks(3949),
                            Months = 0,
                            Order = 0L,
                            ParentId = 0,
                            isLocked = true
                        },
                        new
                        {
                            Pid = 2L,
                            Code = "1",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 46, DateTimeKind.Local).AddTicks(6006),
                            Deleted = false,
                            Enabled = true,
                            IsShowHome = false,
                            LastLogin = new DateTime(2024, 7, 4, 19, 55, 8, 46, DateTimeKind.Local).AddTicks(6012),
                            Months = 1,
                            Order = 1L,
                            ParentId = 0,
                            isLocked = false
                        },
                        new
                        {
                            Pid = 3L,
                            Code = "2",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 46, DateTimeKind.Local).AddTicks(7156),
                            Deleted = false,
                            Enabled = true,
                            IsShowHome = false,
                            LastLogin = new DateTime(2024, 7, 4, 19, 55, 8, 46, DateTimeKind.Local).AddTicks(7162),
                            Months = 6,
                            Order = 2L,
                            ParentId = 0,
                            isLocked = false
                        },
                        new
                        {
                            Pid = 4L,
                            Code = "3",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 46, DateTimeKind.Local).AddTicks(7167),
                            Deleted = false,
                            Enabled = true,
                            IsShowHome = false,
                            LastLogin = new DateTime(2024, 7, 4, 19, 55, 8, 46, DateTimeKind.Local).AddTicks(7169),
                            Months = 9,
                            Order = 3L,
                            ParentId = 0,
                            isLocked = false
                        },
                        new
                        {
                            Pid = 5L,
                            Code = "4",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 46, DateTimeKind.Local).AddTicks(7173),
                            Deleted = false,
                            Enabled = true,
                            IsShowHome = false,
                            LastLogin = new DateTime(2024, 7, 4, 19, 55, 8, 46, DateTimeKind.Local).AddTicks(7174),
                            Months = 18,
                            Order = 4L,
                            ParentId = 0,
                            isLocked = false
                        });
                });

            modelBuilder.Entity("CMS.Areas.Product.Models.ProductCate_ProductDetail", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductCatePid")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductDetailPid")
                        .HasColumnType("bigint");

                    b.HasKey("Pid");

                    b.HasIndex("ProductCatePid");

                    b.HasIndex("ProductDetailPid");

                    b.ToTable("ProductCate_ProductDetails");
                });

            modelBuilder.Entity("CMS.Areas.Product.Models.ProductColor", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowHome")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("ParentRoute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PicThumb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("isLocked")
                        .HasColumnType("bit");

                    b.HasKey("Pid");

                    b.ToTable("ProductColors");

                    b.HasData(
                        new
                        {
                            Pid = 1L,
                            Code = "#000000",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 48, DateTimeKind.Local).AddTicks(9370),
                            Deleted = false,
                            Enabled = true,
                            IsShowHome = false,
                            LastLogin = new DateTime(2024, 7, 4, 19, 55, 8, 48, DateTimeKind.Local).AddTicks(9383),
                            Order = 1L,
                            ParentId = 0,
                            PicThumb = "default.png",
                            isLocked = false
                        });
                });

            modelBuilder.Entity("CMS.Areas.Product.Models.ProductColor_ProductDetail", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsSoldOut")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductColorPid")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductDetailPid")
                        .HasColumnType("bigint");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Pid");

                    b.HasIndex("ProductColorPid");

                    b.HasIndex("ProductDetailPid");

                    b.ToTable("ProductColor_ProductDetails");
                });

            modelBuilder.Entity("CMS.Areas.Product.Models.ProductComment", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<long>("CustomerPid")
                        .HasColumnType("bigint");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("Heart")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<int>("Like")
                        .HasColumnType("int");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductDetailPid")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReplyId")
                        .HasColumnType("bigint");

                    b.Property<int>("Share")
                        .HasColumnType("int");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Pid");

                    b.ToTable("ProductComments");
                });

            modelBuilder.Entity("CMS.Areas.Product.Models.ProductDetail", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CounterView")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<int>("Cycle")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHot")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNew")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lazada")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<string>("PicThumb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Shopee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlugTagKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Stock")
                        .HasColumnType("bigint");

                    b.Property<string>("TagKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tiki")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<int>("UserAmount")
                        .HasColumnType("int");

                    b.HasKey("Pid");

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("CMS.Areas.Product.Models.ProductOption", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowHome")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("ParentRoute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PicThumb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("isLocked")
                        .HasColumnType("bit");

                    b.HasKey("Pid");

                    b.ToTable("ProductOptions");

                    b.HasData(
                        new
                        {
                            Pid = 1L,
                            Code = "default",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 47, DateTimeKind.Local).AddTicks(7127),
                            Deleted = false,
                            Enabled = true,
                            IsShowHome = false,
                            LastLogin = new DateTime(2024, 7, 4, 19, 55, 8, 47, DateTimeKind.Local).AddTicks(7136),
                            Order = 1L,
                            ParentId = 0,
                            isLocked = false
                        });
                });

            modelBuilder.Entity("CMS.Areas.Product.Models.ProductOption_ProductDetail", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsSoldOut")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductDetailPid")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductOptionPid")
                        .HasColumnType("bigint");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Pid");

                    b.HasIndex("ProductDetailPid");

                    b.HasIndex("ProductOptionPid");

                    b.ToTable("ProductOption_ProductDetails");
                });

            modelBuilder.Entity("CMS.Areas.Promotion.Models.Images_Promotion", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<long>("PromotionDetailPid")
                        .HasColumnType("bigint");

                    b.HasKey("Pid");

                    b.HasIndex("PromotionDetailPid");

                    b.ToTable("Images_Promotiones");
                });

            modelBuilder.Entity("CMS.Areas.Promotion.Models.MultiLang_Images_Promotion", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ImagesPromotionPid")
                        .HasColumnType("bigint");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("ImagesPromotionPid");

                    b.ToTable("MultiLang_Images_Promotiones");
                });

            modelBuilder.Entity("CMS.Areas.Promotion.Models.MultiLang_PromotionCate", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PromotionCatePid")
                        .HasColumnType("bigint");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("PromotionCatePid");

                    b.ToTable("MultiLang_PromotionCates");
                });

            modelBuilder.Entity("CMS.Areas.Promotion.Models.MultiLang_PromotionDetail", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionSEO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PromoProductListId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PromotionCatePid")
                        .HasColumnType("bigint");

                    b.Property<long>("PromotionDetailPid")
                        .HasColumnType("bigint");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleSEO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleWithoutSign")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("PromotionCatePid");

                    b.HasIndex("PromotionDetailPid");

                    b.ToTable("MultiLang_PromotionDetails");
                });

            modelBuilder.Entity("CMS.Areas.Promotion.Models.PromotionCate", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("ParentRoute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("isLocked")
                        .HasColumnType("bit");

                    b.HasKey("Pid");

                    b.ToTable("PromotionCates");
                });

            modelBuilder.Entity("CMS.Areas.Promotion.Models.PromotionCate_PromotionDetail", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("PromotionCatePid")
                        .HasColumnType("bigint");

                    b.Property<long>("PromotionDetailPid")
                        .HasColumnType("bigint");

                    b.HasKey("Pid");

                    b.HasIndex("PromotionCatePid");

                    b.HasIndex("PromotionDetailPid");

                    b.ToTable("PromotionCate_PromotionDetails");
                });

            modelBuilder.Entity("CMS.Areas.Promotion.Models.PromotionDetail", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CounterView")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHot")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<string>("PicThumb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SlugTagKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Pid");

                    b.ToTable("PromotionDetails");
                });

            modelBuilder.Entity("CMS.Areas.Promotion.Models.Promotion_Product", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("OptionPid")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("ProductDetailPid")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductOptionPid")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductPid")
                        .HasColumnType("bigint");

                    b.Property<long?>("PromotionDetailPid")
                        .HasColumnType("bigint");

                    b.Property<long>("PromotionPid")
                        .HasColumnType("bigint");

                    b.HasKey("Pid");

                    b.HasIndex("ProductDetailPid");

                    b.HasIndex("ProductOptionPid");

                    b.HasIndex("PromotionDetailPid");

                    b.ToTable("Promotion_Products");
                });

            modelBuilder.Entity("CMS.Areas.Recruitment.Models.Candidate", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RecruitmentDetailPid")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Pid");

                    b.HasIndex("RecruitmentDetailPid");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("CMS.Areas.Recruitment.Models.Images_Recruitment", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<long>("RecruitmentDetailPid")
                        .HasColumnType("bigint");

                    b.HasKey("Pid");

                    b.HasIndex("RecruitmentDetailPid");

                    b.ToTable("Images_Recruitments");
                });

            modelBuilder.Entity("CMS.Areas.Recruitment.Models.MultiLang_Images_Recruitment", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ImagesRecruitmentPid")
                        .HasColumnType("bigint");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("ImagesRecruitmentPid");

                    b.ToTable("MultiLang_Images_Recruitments");
                });

            modelBuilder.Entity("CMS.Areas.Recruitment.Models.MultiLang_RecruitmentCate", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RecruitmentCatePid")
                        .HasColumnType("bigint");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("RecruitmentCatePid");

                    b.ToTable("MultiLang_RecruitmentCates");
                });

            modelBuilder.Entity("CMS.Areas.Recruitment.Models.MultiLang_RecruitmentDetail", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Job")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RecruitmentDetailPid")
                        .HasColumnType("bigint");

                    b.Property<string>("Salary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleWithoutSign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkPlace")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("RecruitmentDetailPid");

                    b.ToTable("MultiLang_RecruitmentDetails");
                });

            modelBuilder.Entity("CMS.Areas.Recruitment.Models.RecruitmentCate", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("isLocked")
                        .HasColumnType("bit");

                    b.HasKey("Pid");

                    b.ToTable("RecruitmentCates");
                });

            modelBuilder.Entity("CMS.Areas.Recruitment.Models.RecruitmentCate_RecruitmentDetail", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("RecruitmentCatePid")
                        .HasColumnType("bigint");

                    b.Property<long>("RecruitmentDetailPid")
                        .HasColumnType("bigint");

                    b.HasKey("Pid");

                    b.HasIndex("RecruitmentCatePid");

                    b.HasIndex("RecruitmentDetailPid");

                    b.ToTable("RecruitmentCate_RecruitmentDetails");
                });

            modelBuilder.Entity("CMS.Areas.Recruitment.Models.RecruitmentDetail", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<long>("CounterView")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<string>("PicThumb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Pid");

                    b.ToTable("RecruitmentDetails");
                });

            modelBuilder.Entity("CMS.Areas.Shared.Models.LogError", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Trace")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.ToTable("LogErrors");
                });

            modelBuilder.Entity("CMS.Areas.Shared.Models.ModulePreview", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsEditPicThumb")
                        .HasColumnType("bit");

                    b.Property<string>("LangKey")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("ModuleId")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Obj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PicThumb")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.ToTable("ModulePreviews");
                });

            modelBuilder.Entity("CMS.Areas.Slide.Models.MultiLang_Slide", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SlidePid")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("SlidePid");

                    b.ToTable("MultiLang_Slides");
                });

            modelBuilder.Entity("CMS.Areas.Slide.Models.Slide", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Pid");

                    b.ToTable("Slides");
                });

            modelBuilder.Entity("CMS.Areas.Voucher.Models.Images_Voucher", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<long>("VoucherDetailPid")
                        .HasColumnType("bigint");

                    b.HasKey("Pid");

                    b.HasIndex("VoucherDetailPid");

                    b.ToTable("Images_Vouchers");
                });

            modelBuilder.Entity("CMS.Areas.Voucher.Models.MultiLang_Images_Voucher", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ImagesVoucherPid")
                        .HasColumnType("bigint");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.HasIndex("ImagesVoucherPid");

                    b.ToTable("MultiLang_Images_Vouchers");
                });

            modelBuilder.Entity("CMS.Areas.Voucher.Models.MultiLang_VoucherCate", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("VoucherCatePid")
                        .HasColumnType("bigint");

                    b.HasKey("Pid");

                    b.HasIndex("VoucherCatePid");

                    b.ToTable("MultiLang_VoucherCates");
                });

            modelBuilder.Entity("CMS.Areas.Voucher.Models.MultiLang_VoucherDetail", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionSEO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleSEO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleWithoutSign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("VoucherCatePid")
                        .HasColumnType("bigint");

                    b.Property<long>("VoucherDetailPid")
                        .HasColumnType("bigint");

                    b.HasKey("Pid");

                    b.HasIndex("VoucherCatePid");

                    b.HasIndex("VoucherDetailPid");

                    b.ToTable("MultiLang_VoucherDetails");
                });

            modelBuilder.Entity("CMS.Areas.Voucher.Models.VoucherCate", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("ParentRoute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("isLocked")
                        .HasColumnType("bit");

                    b.HasKey("Pid");

                    b.ToTable("VoucherCates");

                    b.HasData(
                        new
                        {
                            Pid = 1L,
                            Code = "/",
                            CreateDate = new DateTime(2024, 7, 4, 19, 55, 8, 44, DateTimeKind.Local).AddTicks(1864),
                            Deleted = false,
                            Enabled = true,
                            LastLogin = new DateTime(2024, 7, 4, 19, 55, 8, 44, DateTimeKind.Local).AddTicks(1873),
                            Order = 0L,
                            ParentId = 0,
                            isLocked = true
                        });
                });

            modelBuilder.Entity("CMS.Areas.Voucher.Models.VoucherCate_VoucherDetail", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("VoucherCatePid")
                        .HasColumnType("bigint");

                    b.Property<long>("VoucherDetailPid")
                        .HasColumnType("bigint");

                    b.HasKey("Pid");

                    b.HasIndex("VoucherCatePid");

                    b.HasIndex("VoucherDetailPid");

                    b.ToTable("VoucherCate_VoucherDetails");
                });

            modelBuilder.Entity("CMS.Areas.Voucher.Models.VoucherDetail", b =>
                {
                    b.Property<long>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CounterView")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHot")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("MinTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<string>("PicThumb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SlugTagKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<int>("UsedQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("VoucherValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Pid");

                    b.ToTable("VoucherDetails");
                });

            modelBuilder.Entity("CMS.Areas.About.Models.AboutDetail", b =>
                {
                    b.HasOne("CMS.Areas.About.Models.AboutCate", "AboutCate")
                        .WithMany("AboutDetails")
                        .HasForeignKey("AboutCatePid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AboutCate");
                });

            modelBuilder.Entity("CMS.Areas.About.Models.MultiLang_AboutDetail", b =>
                {
                    b.HasOne("CMS.Areas.About.Models.AboutDetail", "AboutDetail")
                        .WithMany("MultiLang_AboutDetails")
                        .HasForeignKey("AboutDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AboutDetail");
                });

            modelBuilder.Entity("CMS.Areas.Admin.Models.GroupPermisson", b =>
                {
                    b.HasOne("CMS.Areas.Admin.Models.GroupUser", "GroupUser")
                        .WithMany("GroupPermissons")
                        .HasForeignKey("GroupUserCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS.Areas.Admin.Models.Module", "Module")
                        .WithMany("GroupPermissons")
                        .HasForeignKey("ModuleCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS.Areas.Admin.Models.Permission", "Permission")
                        .WithMany("GroupPermissons")
                        .HasForeignKey("PermissonCode");

                    b.Navigation("GroupUser");

                    b.Navigation("Module");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("CMS.Areas.Admin.Models.User", b =>
                {
                    b.HasOne("CMS.Areas.Admin.Models.GroupUser", "GroupUser")
                        .WithMany()
                        .HasForeignKey("GroupUserCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupUser");
                });

            modelBuilder.Entity("CMS.Areas.Admin.Models.UserPermission", b =>
                {
                    b.HasOne("CMS.Areas.Admin.Models.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS.Areas.Admin.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissonCode");

                    b.HasOne("CMS.Areas.Admin.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CMS.Areas.Advertisement.Models.Advertisement_Page", b =>
                {
                    b.HasOne("CMS.Areas.Advertisement.Models.Advertisement", "Advertisement")
                        .WithMany("Advertisement_Pages")
                        .HasForeignKey("AdvertisementPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS.Areas.Banner.Models.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advertisement");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("CMS.Areas.Advertisement.Models.MultiLang_Advertisement", b =>
                {
                    b.HasOne("CMS.Areas.Advertisement.Models.Advertisement", "Advertisement")
                        .WithMany("MultiLang_Advertisements")
                        .HasForeignKey("AdvertisementPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advertisement");
                });

            modelBuilder.Entity("CMS.Areas.Banner.Models.Banner_Page", b =>
                {
                    b.HasOne("CMS.Areas.Banner.Models.Banner", "Banner")
                        .WithMany("Banner_Pages")
                        .HasForeignKey("BannerPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS.Areas.Banner.Models.Page", "Page")
                        .WithMany("Banner_Pages")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("CMS.Areas.Banner.Models.MultiLang_Banner", b =>
                {
                    b.HasOne("CMS.Areas.Banner.Models.Banner", "Banner")
                        .WithMany("MultiLang_Banners")
                        .HasForeignKey("BannerPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");
                });

            modelBuilder.Entity("CMS.Areas.Banner.Models.MultiLang_Page", b =>
                {
                    b.HasOne("CMS.Areas.Banner.Models.Page", "Page")
                        .WithMany("MultiLang_Pages")
                        .HasForeignKey("PagePid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("CMS.Areas.Calendar.Models.MultiLang_Calendar", b =>
                {
                    b.HasOne("CMS.Areas.Calendar.Models.Calendar", "Calendar")
                        .WithMany("MultiLang_Calendars")
                        .HasForeignKey("CalendarPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendar");
                });

            modelBuilder.Entity("CMS.Areas.Comment.Models.MultiLang_Comment", b =>
                {
                    b.HasOne("CMS.Areas.Comment.Models.Comment", "Comment")
                        .WithMany("MultiLang_Comments")
                        .HasForeignKey("CommentPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("CMS.Areas.Configurations.Models.MultiLang_EmailTemplate", b =>
                {
                    b.HasOne("CMS.Areas.Configurations.Models.EmailTemplate", "EmailTemplate")
                        .WithMany("MultiLang_EmailTemplates")
                        .HasForeignKey("EmailTemplatePid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailTemplate");
                });

            modelBuilder.Entity("CMS.Areas.Contact.Models.EnquireList", b =>
                {
                    b.HasOne("CMS.Areas.Feature.Models.FeatureDetail", "ServiceDetail")
                        .WithMany("EnquireLists")
                        .HasForeignKey("ServiceDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceDetail");
                });

            modelBuilder.Entity("CMS.Areas.Contact.Models.MultiLang_Branch", b =>
                {
                    b.HasOne("CMS.Areas.Contact.Models.Branch", "Branch")
                        .WithMany("MultiLang_Branchs")
                        .HasForeignKey("BranchPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("CMS.Areas.Contact.Models.MultiLang_ContactInfo", b =>
                {
                    b.HasOne("CMS.Areas.Contact.Models.ContactInfo", "ContactInfo")
                        .WithMany()
                        .HasForeignKey("ContactInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactInfo");
                });

            modelBuilder.Entity("CMS.Areas.Convenience.Models.MultiLang_Convenience", b =>
                {
                    b.HasOne("CMS.Areas.Convenience.Models.Convenience", "Convenience")
                        .WithMany("MultiLang_Conveniences")
                        .HasForeignKey("ConveniencePid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Convenience");
                });

            modelBuilder.Entity("CMS.Areas.FAQ.Models.FAQCate_FAQDetail", b =>
                {
                    b.HasOne("CMS.Areas.FAQ.Models.FAQCate", "FAQCate")
                        .WithMany("FAQCate_FAQDetails")
                        .HasForeignKey("FAQCatePid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS.Areas.FAQ.Models.FAQDetail", "FAQDetail")
                        .WithMany("FAQCate_FAQDetails")
                        .HasForeignKey("FAQDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FAQCate");

                    b.Navigation("FAQDetail");
                });

            modelBuilder.Entity("CMS.Areas.FAQ.Models.Images_FAQ", b =>
                {
                    b.HasOne("CMS.Areas.FAQ.Models.FAQDetail", "FAQDetail")
                        .WithMany("Images_FAQes")
                        .HasForeignKey("FAQDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FAQDetail");
                });

            modelBuilder.Entity("CMS.Areas.FAQ.Models.MultiLang_FAQCate", b =>
                {
                    b.HasOne("CMS.Areas.FAQ.Models.FAQCate", "FAQCate")
                        .WithMany("MultiLang_FAQCates")
                        .HasForeignKey("FAQCatePid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FAQCate");
                });

            modelBuilder.Entity("CMS.Areas.FAQ.Models.MultiLang_FAQDetail", b =>
                {
                    b.HasOne("CMS.Areas.FAQ.Models.FAQCate", "FAQCate")
                        .WithMany()
                        .HasForeignKey("FAQCatePid");

                    b.HasOne("CMS.Areas.FAQ.Models.FAQDetail", "FAQDetail")
                        .WithMany("MultiLang_FAQDetails")
                        .HasForeignKey("FAQDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FAQCate");

                    b.Navigation("FAQDetail");
                });

            modelBuilder.Entity("CMS.Areas.FAQ.Models.MultiLang_Images_FAQ", b =>
                {
                    b.HasOne("CMS.Areas.FAQ.Models.Images_FAQ", "ImagesFAQ")
                        .WithMany("MultiLang_Images_FAQes")
                        .HasForeignKey("ImagesFAQPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImagesFAQ");
                });

            modelBuilder.Entity("CMS.Areas.Feature.Models.FeatureCate_FeatureDetail", b =>
                {
                    b.HasOne("CMS.Areas.Feature.Models.FeatureCate", "FeatureCate")
                        .WithMany("FeatureCate_FeatureDetails")
                        .HasForeignKey("FeatureCatePid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS.Areas.Feature.Models.FeatureDetail", "FeatureDetail")
                        .WithMany("FeatureCate_FeatureDetails")
                        .HasForeignKey("FeatureDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeatureCate");

                    b.Navigation("FeatureDetail");
                });

            modelBuilder.Entity("CMS.Areas.Feature.Models.Images_Feature", b =>
                {
                    b.HasOne("CMS.Areas.Feature.Models.FeatureDetail", "FeatureDetail")
                        .WithMany("Images_Featurees")
                        .HasForeignKey("FeatureDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeatureDetail");
                });

            modelBuilder.Entity("CMS.Areas.Feature.Models.MultiLang_FeatureCate", b =>
                {
                    b.HasOne("CMS.Areas.Feature.Models.FeatureCate", "FeatureCate")
                        .WithMany("MultiLang_FeatureCates")
                        .HasForeignKey("FeatureCatePid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeatureCate");
                });

            modelBuilder.Entity("CMS.Areas.Feature.Models.MultiLang_FeatureDetail", b =>
                {
                    b.HasOne("CMS.Areas.Feature.Models.FeatureCate", "FeatureCate")
                        .WithMany()
                        .HasForeignKey("FeatureCatePid");

                    b.HasOne("CMS.Areas.Feature.Models.FeatureDetail", "FeatureDetail")
                        .WithMany("MultiLang_FeatureDetails")
                        .HasForeignKey("FeatureDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeatureCate");

                    b.Navigation("FeatureDetail");
                });

            modelBuilder.Entity("CMS.Areas.Feature.Models.MultiLang_Images_Feature", b =>
                {
                    b.HasOne("CMS.Areas.Feature.Models.Images_Feature", "ImagesFeature")
                        .WithMany("MultiLang_Images_Featurees")
                        .HasForeignKey("ImagesFeaturePid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImagesFeature");
                });

            modelBuilder.Entity("CMS.Areas.Gallery.Models.GalleryCate_GalleryDetail", b =>
                {
                    b.HasOne("CMS.Areas.Gallery.Models.GalleryCate", "GalleryCate")
                        .WithMany("GalleryCate_GalleryDetails")
                        .HasForeignKey("GalleryCatePid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS.Areas.Gallery.Models.GalleryDetail", "GalleryDetail")
                        .WithMany("GalleryCate_GalleryDetails")
                        .HasForeignKey("GalleryDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GalleryCate");

                    b.Navigation("GalleryDetail");
                });

            modelBuilder.Entity("CMS.Areas.Gallery.Models.Images_Gallery", b =>
                {
                    b.HasOne("CMS.Areas.Gallery.Models.GalleryDetail", "GalleryDetail")
                        .WithMany("Images_Galleryes")
                        .HasForeignKey("GalleryDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GalleryDetail");
                });

            modelBuilder.Entity("CMS.Areas.Gallery.Models.MultiLang_GalleryCate", b =>
                {
                    b.HasOne("CMS.Areas.Gallery.Models.GalleryCate", "GalleryCate")
                        .WithMany("MultiLang_GalleryCates")
                        .HasForeignKey("GalleryCatePid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GalleryCate");
                });

            modelBuilder.Entity("CMS.Areas.Gallery.Models.MultiLang_GalleryDetail", b =>
                {
                    b.HasOne("CMS.Areas.Gallery.Models.GalleryCate", "GalleryCate")
                        .WithMany()
                        .HasForeignKey("GalleryCatePid");

                    b.HasOne("CMS.Areas.Gallery.Models.GalleryDetail", "GalleryDetail")
                        .WithMany("MultiLang_GalleryDetails")
                        .HasForeignKey("GalleryDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GalleryCate");

                    b.Navigation("GalleryDetail");
                });

            modelBuilder.Entity("CMS.Areas.Gallery.Models.MultiLang_Images_Gallery", b =>
                {
                    b.HasOne("CMS.Areas.Gallery.Models.Images_Gallery", "ImagesGallery")
                        .WithMany("MultiLang_Images_Galleryes")
                        .HasForeignKey("ImagesGalleryPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImagesGallery");
                });

            modelBuilder.Entity("CMS.Areas.HomePage.Models.MultiLang_HomePage", b =>
                {
                    b.HasOne("CMS.Areas.HomePage.Models.HomePage", "HomePage")
                        .WithMany("MultiLang_HomePages")
                        .HasForeignKey("HomePagePid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HomePage");
                });

            modelBuilder.Entity("CMS.Areas.News.Models.Images_News", b =>
                {
                    b.HasOne("CMS.Areas.News.Models.NewsDetail", "NewsDetail")
                        .WithMany("Images_Newses")
                        .HasForeignKey("NewsDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewsDetail");
                });

            modelBuilder.Entity("CMS.Areas.News.Models.MultiLang_Images_News", b =>
                {
                    b.HasOne("CMS.Areas.News.Models.Images_News", "ImagesNews")
                        .WithMany("MultiLang_Images_Newses")
                        .HasForeignKey("ImagesNewsPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImagesNews");
                });

            modelBuilder.Entity("CMS.Areas.News.Models.MultiLang_NewsCate", b =>
                {
                    b.HasOne("CMS.Areas.News.Models.NewsCate", "NewsCate")
                        .WithMany("MultiLang_NewsCates")
                        .HasForeignKey("NewsCatePid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewsCate");
                });

            modelBuilder.Entity("CMS.Areas.News.Models.MultiLang_NewsDetail", b =>
                {
                    b.HasOne("CMS.Areas.News.Models.NewsCate", "NewsCate")
                        .WithMany()
                        .HasForeignKey("NewsCatePid");

                    b.HasOne("CMS.Areas.News.Models.NewsDetail", "NewsDetail")
                        .WithMany("MultiLang_NewsDetails")
                        .HasForeignKey("NewsDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewsCate");

                    b.Navigation("NewsDetail");
                });

            modelBuilder.Entity("CMS.Areas.News.Models.NewsCate_NewsDetail", b =>
                {
                    b.HasOne("CMS.Areas.News.Models.NewsCate", "NewsCate")
                        .WithMany("NewsCate_NewsDetails")
                        .HasForeignKey("NewsCatePid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS.Areas.News.Models.NewsDetail", "NewsDetail")
                        .WithMany("NewsCate_NewsDetails")
                        .HasForeignKey("NewsDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewsCate");

                    b.Navigation("NewsDetail");
                });

            modelBuilder.Entity("CMS.Areas.Order.Models.OrderDetail", b =>
                {
                    b.HasOne("CMS.Areas.Order.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CMS.Areas.Popup.Models.MultiLang_Popup", b =>
                {
                    b.HasOne("CMS.Areas.Popup.Models.Popup", "Popup")
                        .WithMany("MultiLang_Popups")
                        .HasForeignKey("PopupPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Popup");
                });

            modelBuilder.Entity("CMS.Areas.Popup.Models.Popup_Page", b =>
                {
                    b.HasOne("CMS.Areas.Banner.Models.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS.Areas.Popup.Models.Popup", "Popup")
                        .WithMany("Popup_Pages")
                        .HasForeignKey("PopupPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");

                    b.Navigation("Popup");
                });

            modelBuilder.Entity("CMS.Areas.Product.Models.Images_Product", b =>
                {
                    b.HasOne("CMS.Areas.Product.Models.ProductDetail", "ProductDetail")
                        .WithMany("Images_Productes")
                        .HasForeignKey("ProductDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("CMS.Areas.Product.Models.MultiLang_Images_Product", b =>
                {
                    b.HasOne("CMS.Areas.Product.Models.Images_Product", "ImagesProduct")
                        .WithMany("MultiLang_Images_Productes")
                        .HasForeignKey("ImagesProductPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImagesProduct");
                });

            modelBuilder.Entity("CMS.Areas.Product.Models.MultiLang_ProductCate", b =>
                {
                    b.HasOne("CMS.Areas.Product.Models.ProductCate", "ProductCate")
                        .WithMany("MultiLang_ProductCates")
                        .HasForeignKey("ProductCatePid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCate");
                });

            modelBuilder.Entity("CMS.Areas.Product.Models.MultiLang_ProductColor", b =>
                {
                    b.HasOne("CMS.Areas.Product.Models.ProductColor", "ProductColor")
                        .WithMany("MultiLang_ProductColors")
                        .HasForeignKey("ProductColorPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductColor");
                });

            modelBuilder.Entity("CMS.Areas.Product.Models.MultiLang_ProductDetail", b =>
                {
                    b.HasOne("CMS.Areas.Product.Models.ProductDetail", "ProductDetail")
                        .WithMany("MultiLang_ProductDetails")
                        .HasForeignKey("ProductDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("CMS.Areas.Product.Models.MultiLang_ProductOption", b =>
                {
                    b.HasOne("CMS.Areas.Product.Models.ProductOption", "ProductOption")
                        .WithMany("MultiLang_ProductOptions")
                        .HasForeignKey("ProductOptionPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductOption");
                });

            modelBuilder.Entity("CMS.Areas.Product.Models.ProductCate_ProductDetail", b =>
                {
                    b.HasOne("CMS.Areas.Product.Models.ProductCate", "ProductCate")
                        .WithMany("ProductCate_ProductDetails")
                        .HasForeignKey("ProductCatePid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS.Areas.Product.Models.ProductDetail", "ProductDetail")
                        .WithMany("ProductCate_ProductDetails")
                        .HasForeignKey("ProductDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCate");

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("CMS.Areas.Product.Models.ProductColor_ProductDetail", b =>
                {
                    b.HasOne("CMS.Areas.Product.Models.ProductColor", "ProductColor")
                        .WithMany("ProductColor_ProductDetails")
                        .HasForeignKey("ProductColorPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS.Areas.Product.Models.ProductDetail", "ProductDetail")
                        .WithMany("ProductColor_ProductDetails")
                        .HasForeignKey("ProductDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductColor");

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("CMS.Areas.Product.Models.ProductOption_ProductDetail", b =>
                {
                    b.HasOne("CMS.Areas.Product.Models.ProductDetail", "ProductDetail")
                        .WithMany("ProductOption_ProductDetails")
                        .HasForeignKey("ProductDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS.Areas.Product.Models.ProductOption", "ProductOption")
                        .WithMany("ProductOption_ProductDetails")
                        .HasForeignKey("ProductOptionPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductDetail");

                    b.Navigation("ProductOption");
                });

            modelBuilder.Entity("CMS.Areas.Promotion.Models.Images_Promotion", b =>
                {
                    b.HasOne("CMS.Areas.Promotion.Models.PromotionDetail", "PromotionDetail")
                        .WithMany("Images_Promotiones")
                        .HasForeignKey("PromotionDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PromotionDetail");
                });

            modelBuilder.Entity("CMS.Areas.Promotion.Models.MultiLang_Images_Promotion", b =>
                {
                    b.HasOne("CMS.Areas.Promotion.Models.Images_Promotion", "ImagesPromotion")
                        .WithMany("MultiLang_Images_Promotiones")
                        .HasForeignKey("ImagesPromotionPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImagesPromotion");
                });

            modelBuilder.Entity("CMS.Areas.Promotion.Models.MultiLang_PromotionCate", b =>
                {
                    b.HasOne("CMS.Areas.Promotion.Models.PromotionCate", "PromotionCate")
                        .WithMany("MultiLang_PromotionCates")
                        .HasForeignKey("PromotionCatePid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PromotionCate");
                });

            modelBuilder.Entity("CMS.Areas.Promotion.Models.MultiLang_PromotionDetail", b =>
                {
                    b.HasOne("CMS.Areas.Promotion.Models.PromotionCate", "PromotionCate")
                        .WithMany()
                        .HasForeignKey("PromotionCatePid");

                    b.HasOne("CMS.Areas.Promotion.Models.PromotionDetail", "PromotionDetail")
                        .WithMany("MultiLang_PromotionDetails")
                        .HasForeignKey("PromotionDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PromotionCate");

                    b.Navigation("PromotionDetail");
                });

            modelBuilder.Entity("CMS.Areas.Promotion.Models.PromotionCate_PromotionDetail", b =>
                {
                    b.HasOne("CMS.Areas.Promotion.Models.PromotionCate", "PromotionCate")
                        .WithMany("PromotionCate_PromotionDetails")
                        .HasForeignKey("PromotionCatePid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS.Areas.Promotion.Models.PromotionDetail", "PromotionDetail")
                        .WithMany("PromotionCate_PromotionDetails")
                        .HasForeignKey("PromotionDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PromotionCate");

                    b.Navigation("PromotionDetail");
                });

            modelBuilder.Entity("CMS.Areas.Promotion.Models.Promotion_Product", b =>
                {
                    b.HasOne("CMS.Areas.Product.Models.ProductDetail", "ProductDetail")
                        .WithMany("Promotion_Products")
                        .HasForeignKey("ProductDetailPid");

                    b.HasOne("CMS.Areas.Product.Models.ProductOption", "ProductOption")
                        .WithMany("Promotion_Products")
                        .HasForeignKey("ProductOptionPid");

                    b.HasOne("CMS.Areas.Promotion.Models.PromotionDetail", "PromotionDetail")
                        .WithMany("Promotion_Products")
                        .HasForeignKey("PromotionDetailPid");

                    b.Navigation("ProductDetail");

                    b.Navigation("ProductOption");

                    b.Navigation("PromotionDetail");
                });

            modelBuilder.Entity("CMS.Areas.Recruitment.Models.Candidate", b =>
                {
                    b.HasOne("CMS.Areas.Recruitment.Models.RecruitmentDetail", "RecruitmentDetail")
                        .WithMany("Candidates")
                        .HasForeignKey("RecruitmentDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecruitmentDetail");
                });

            modelBuilder.Entity("CMS.Areas.Recruitment.Models.Images_Recruitment", b =>
                {
                    b.HasOne("CMS.Areas.Recruitment.Models.RecruitmentDetail", "RecruitmentDetail")
                        .WithMany("Images_Recruitmentes")
                        .HasForeignKey("RecruitmentDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecruitmentDetail");
                });

            modelBuilder.Entity("CMS.Areas.Recruitment.Models.MultiLang_Images_Recruitment", b =>
                {
                    b.HasOne("CMS.Areas.Recruitment.Models.Images_Recruitment", "ImagesRecruitment")
                        .WithMany("MultiLang_Images_Recruitmentes")
                        .HasForeignKey("ImagesRecruitmentPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImagesRecruitment");
                });

            modelBuilder.Entity("CMS.Areas.Recruitment.Models.MultiLang_RecruitmentCate", b =>
                {
                    b.HasOne("CMS.Areas.Recruitment.Models.RecruitmentCate", "RecruitmentCate")
                        .WithMany("MultiLang_RecruitmentCates")
                        .HasForeignKey("RecruitmentCatePid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecruitmentCate");
                });

            modelBuilder.Entity("CMS.Areas.Recruitment.Models.MultiLang_RecruitmentDetail", b =>
                {
                    b.HasOne("CMS.Areas.Recruitment.Models.RecruitmentDetail", "RecruitmentDetail")
                        .WithMany("MultiLang_RecruitmentDetails")
                        .HasForeignKey("RecruitmentDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecruitmentDetail");
                });

            modelBuilder.Entity("CMS.Areas.Recruitment.Models.RecruitmentCate_RecruitmentDetail", b =>
                {
                    b.HasOne("CMS.Areas.Recruitment.Models.RecruitmentCate", "RecruitmentCate")
                        .WithMany("RecruitmentCate_RecruitmentDetails")
                        .HasForeignKey("RecruitmentCatePid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS.Areas.Recruitment.Models.RecruitmentDetail", "RecruitmentDetail")
                        .WithMany()
                        .HasForeignKey("RecruitmentDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecruitmentCate");

                    b.Navigation("RecruitmentDetail");
                });

            modelBuilder.Entity("CMS.Areas.Slide.Models.MultiLang_Slide", b =>
                {
                    b.HasOne("CMS.Areas.Slide.Models.Slide", "Slide")
                        .WithMany("MultiLang_Slides")
                        .HasForeignKey("SlidePid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slide");
                });

            modelBuilder.Entity("CMS.Areas.Voucher.Models.Images_Voucher", b =>
                {
                    b.HasOne("CMS.Areas.Voucher.Models.VoucherDetail", "VoucherDetail")
                        .WithMany("Images_Voucheres")
                        .HasForeignKey("VoucherDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VoucherDetail");
                });

            modelBuilder.Entity("CMS.Areas.Voucher.Models.MultiLang_Images_Voucher", b =>
                {
                    b.HasOne("CMS.Areas.Voucher.Models.Images_Voucher", "ImagesVoucher")
                        .WithMany("MultiLang_Images_Voucheres")
                        .HasForeignKey("ImagesVoucherPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImagesVoucher");
                });

            modelBuilder.Entity("CMS.Areas.Voucher.Models.MultiLang_VoucherCate", b =>
                {
                    b.HasOne("CMS.Areas.Voucher.Models.VoucherCate", "VoucherCate")
                        .WithMany("MultiLang_VoucherCates")
                        .HasForeignKey("VoucherCatePid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VoucherCate");
                });

            modelBuilder.Entity("CMS.Areas.Voucher.Models.MultiLang_VoucherDetail", b =>
                {
                    b.HasOne("CMS.Areas.Voucher.Models.VoucherCate", "VoucherCate")
                        .WithMany()
                        .HasForeignKey("VoucherCatePid");

                    b.HasOne("CMS.Areas.Voucher.Models.VoucherDetail", "VoucherDetail")
                        .WithMany("MultiLang_VoucherDetails")
                        .HasForeignKey("VoucherDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VoucherCate");

                    b.Navigation("VoucherDetail");
                });

            modelBuilder.Entity("CMS.Areas.Voucher.Models.VoucherCate_VoucherDetail", b =>
                {
                    b.HasOne("CMS.Areas.Voucher.Models.VoucherCate", "VoucherCate")
                        .WithMany("VoucherCate_VoucherDetails")
                        .HasForeignKey("VoucherCatePid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS.Areas.Voucher.Models.VoucherDetail", "VoucherDetail")
                        .WithMany("VoucherCate_VoucherDetails")
                        .HasForeignKey("VoucherDetailPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VoucherCate");

                    b.Navigation("VoucherDetail");
                });

            modelBuilder.Entity("CMS.Areas.About.Models.AboutCate", b =>
                {
                    b.Navigation("AboutDetails");
                });

            modelBuilder.Entity("CMS.Areas.About.Models.AboutDetail", b =>
                {
                    b.Navigation("MultiLang_AboutDetails");
                });

            modelBuilder.Entity("CMS.Areas.Admin.Models.GroupUser", b =>
                {
                    b.Navigation("GroupPermissons");
                });

            modelBuilder.Entity("CMS.Areas.Admin.Models.Module", b =>
                {
                    b.Navigation("GroupPermissons");
                });

            modelBuilder.Entity("CMS.Areas.Admin.Models.Permission", b =>
                {
                    b.Navigation("GroupPermissons");
                });

            modelBuilder.Entity("CMS.Areas.Advertisement.Models.Advertisement", b =>
                {
                    b.Navigation("Advertisement_Pages");

                    b.Navigation("MultiLang_Advertisements");
                });

            modelBuilder.Entity("CMS.Areas.Banner.Models.Banner", b =>
                {
                    b.Navigation("Banner_Pages");

                    b.Navigation("MultiLang_Banners");
                });

            modelBuilder.Entity("CMS.Areas.Banner.Models.Page", b =>
                {
                    b.Navigation("Banner_Pages");

                    b.Navigation("MultiLang_Pages");
                });

            modelBuilder.Entity("CMS.Areas.Calendar.Models.Calendar", b =>
                {
                    b.Navigation("MultiLang_Calendars");
                });

            modelBuilder.Entity("CMS.Areas.Comment.Models.Comment", b =>
                {
                    b.Navigation("MultiLang_Comments");
                });

            modelBuilder.Entity("CMS.Areas.Configurations.Models.EmailTemplate", b =>
                {
                    b.Navigation("MultiLang_EmailTemplates");
                });

            modelBuilder.Entity("CMS.Areas.Contact.Models.Branch", b =>
                {
                    b.Navigation("MultiLang_Branchs");
                });

            modelBuilder.Entity("CMS.Areas.Convenience.Models.Convenience", b =>
                {
                    b.Navigation("MultiLang_Conveniences");
                });

            modelBuilder.Entity("CMS.Areas.FAQ.Models.FAQCate", b =>
                {
                    b.Navigation("FAQCate_FAQDetails");

                    b.Navigation("MultiLang_FAQCates");
                });

            modelBuilder.Entity("CMS.Areas.FAQ.Models.FAQDetail", b =>
                {
                    b.Navigation("FAQCate_FAQDetails");

                    b.Navigation("Images_FAQes");

                    b.Navigation("MultiLang_FAQDetails");
                });

            modelBuilder.Entity("CMS.Areas.FAQ.Models.Images_FAQ", b =>
                {
                    b.Navigation("MultiLang_Images_FAQes");
                });

            modelBuilder.Entity("CMS.Areas.Feature.Models.FeatureCate", b =>
                {
                    b.Navigation("FeatureCate_FeatureDetails");

                    b.Navigation("MultiLang_FeatureCates");
                });

            modelBuilder.Entity("CMS.Areas.Feature.Models.FeatureDetail", b =>
                {
                    b.Navigation("EnquireLists");

                    b.Navigation("FeatureCate_FeatureDetails");

                    b.Navigation("Images_Featurees");

                    b.Navigation("MultiLang_FeatureDetails");
                });

            modelBuilder.Entity("CMS.Areas.Feature.Models.Images_Feature", b =>
                {
                    b.Navigation("MultiLang_Images_Featurees");
                });

            modelBuilder.Entity("CMS.Areas.Gallery.Models.GalleryCate", b =>
                {
                    b.Navigation("GalleryCate_GalleryDetails");

                    b.Navigation("MultiLang_GalleryCates");
                });

            modelBuilder.Entity("CMS.Areas.Gallery.Models.GalleryDetail", b =>
                {
                    b.Navigation("GalleryCate_GalleryDetails");

                    b.Navigation("Images_Galleryes");

                    b.Navigation("MultiLang_GalleryDetails");
                });

            modelBuilder.Entity("CMS.Areas.Gallery.Models.Images_Gallery", b =>
                {
                    b.Navigation("MultiLang_Images_Galleryes");
                });

            modelBuilder.Entity("CMS.Areas.HomePage.Models.HomePage", b =>
                {
                    b.Navigation("MultiLang_HomePages");
                });

            modelBuilder.Entity("CMS.Areas.News.Models.Images_News", b =>
                {
                    b.Navigation("MultiLang_Images_Newses");
                });

            modelBuilder.Entity("CMS.Areas.News.Models.NewsCate", b =>
                {
                    b.Navigation("MultiLang_NewsCates");

                    b.Navigation("NewsCate_NewsDetails");
                });

            modelBuilder.Entity("CMS.Areas.News.Models.NewsDetail", b =>
                {
                    b.Navigation("Images_Newses");

                    b.Navigation("MultiLang_NewsDetails");

                    b.Navigation("NewsCate_NewsDetails");
                });

            modelBuilder.Entity("CMS.Areas.Order.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("CMS.Areas.Popup.Models.Popup", b =>
                {
                    b.Navigation("MultiLang_Popups");

                    b.Navigation("Popup_Pages");
                });

            modelBuilder.Entity("CMS.Areas.Product.Models.Images_Product", b =>
                {
                    b.Navigation("MultiLang_Images_Productes");
                });

            modelBuilder.Entity("CMS.Areas.Product.Models.ProductCate", b =>
                {
                    b.Navigation("MultiLang_ProductCates");

                    b.Navigation("ProductCate_ProductDetails");
                });

            modelBuilder.Entity("CMS.Areas.Product.Models.ProductColor", b =>
                {
                    b.Navigation("MultiLang_ProductColors");

                    b.Navigation("ProductColor_ProductDetails");
                });

            modelBuilder.Entity("CMS.Areas.Product.Models.ProductDetail", b =>
                {
                    b.Navigation("Images_Productes");

                    b.Navigation("MultiLang_ProductDetails");

                    b.Navigation("ProductCate_ProductDetails");

                    b.Navigation("ProductColor_ProductDetails");

                    b.Navigation("ProductOption_ProductDetails");

                    b.Navigation("Promotion_Products");
                });

            modelBuilder.Entity("CMS.Areas.Product.Models.ProductOption", b =>
                {
                    b.Navigation("MultiLang_ProductOptions");

                    b.Navigation("ProductOption_ProductDetails");

                    b.Navigation("Promotion_Products");
                });

            modelBuilder.Entity("CMS.Areas.Promotion.Models.Images_Promotion", b =>
                {
                    b.Navigation("MultiLang_Images_Promotiones");
                });

            modelBuilder.Entity("CMS.Areas.Promotion.Models.PromotionCate", b =>
                {
                    b.Navigation("MultiLang_PromotionCates");

                    b.Navigation("PromotionCate_PromotionDetails");
                });

            modelBuilder.Entity("CMS.Areas.Promotion.Models.PromotionDetail", b =>
                {
                    b.Navigation("Images_Promotiones");

                    b.Navigation("MultiLang_PromotionDetails");

                    b.Navigation("Promotion_Products");

                    b.Navigation("PromotionCate_PromotionDetails");
                });

            modelBuilder.Entity("CMS.Areas.Recruitment.Models.Images_Recruitment", b =>
                {
                    b.Navigation("MultiLang_Images_Recruitmentes");
                });

            modelBuilder.Entity("CMS.Areas.Recruitment.Models.RecruitmentCate", b =>
                {
                    b.Navigation("MultiLang_RecruitmentCates");

                    b.Navigation("RecruitmentCate_RecruitmentDetails");
                });

            modelBuilder.Entity("CMS.Areas.Recruitment.Models.RecruitmentDetail", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Images_Recruitmentes");

                    b.Navigation("MultiLang_RecruitmentDetails");
                });

            modelBuilder.Entity("CMS.Areas.Slide.Models.Slide", b =>
                {
                    b.Navigation("MultiLang_Slides");
                });

            modelBuilder.Entity("CMS.Areas.Voucher.Models.Images_Voucher", b =>
                {
                    b.Navigation("MultiLang_Images_Voucheres");
                });

            modelBuilder.Entity("CMS.Areas.Voucher.Models.VoucherCate", b =>
                {
                    b.Navigation("MultiLang_VoucherCates");

                    b.Navigation("VoucherCate_VoucherDetails");
                });

            modelBuilder.Entity("CMS.Areas.Voucher.Models.VoucherDetail", b =>
                {
                    b.Navigation("Images_Voucheres");

                    b.Navigation("MultiLang_VoucherDetails");

                    b.Navigation("VoucherCate_VoucherDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
