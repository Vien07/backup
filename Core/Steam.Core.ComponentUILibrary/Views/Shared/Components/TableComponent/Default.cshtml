@using ComponentUILibrary.Models
@using ComponentUILibrary
@using Steam.Core.ComponentUILibrary.Constant

@model TableData
@{
    var asc = "asc"; //tăng dần
    var desc = "desc";//giảm dần
    string VirtualFolder = ComponentUILibraryConstant.VirtualFolder;

}
<script src="@Url.Content(VirtualFolder+TableConstants.PathLib)/table-dragger.min.js"></script>

<table id="@Model.ID" class="@Model.Class">
    <thead>
        <tr width="1">
            @if (Model.CheckAllCol == true)
            {
                <th>
                    <div class="form-check">
                        <div class="checkbox">
                            <input type="checkbox" class="form-check-input" id="checkedAll">
                        </div>
                    </div>
                </th>
            }

            @if (Model.Header != null)
            {
                foreach (var item in Model.Header)
                {
                    var filter = "";
                    if (item.Filter.ToLower() == asc)
                    {
                        filter = "<span onclick='ChangeFilter()' id='sort-amount'><i class='fas fa-sort-amount-down-alt'></i></span> ";
                    }
                    else if (item.Filter.ToLower() == desc)
                    {
                        filter = "<span onclick='ChangeFilter()'  id='sort-amount'><i class='fas fa-sort-amount-up-alt'></i></span> ";

                    }
                    <th class="@item.Class text-nowrap" width="@item.Width">@item.Name @Html.Raw(filter)  </th>

                }
            }
        </tr>
    </thead>
    <tbody id="tdBody_@Model.ID">
        @if (Model.Type == "Html")
        {
            @Html.Raw(Model.Body)

        }
        else if (Model.Type == "View")
        {
            @Model.Body
        }

    </tbody>
</table>
<script>

    $(function() {
            InitDragDropTable()
    });
    $("#checkedAll").change(function() {
        if (this.checked) {
            $(".checkItem").each(function() {
                this.checked = true;
            });
        } else {
            $(".checkItem").each(function() {
                this.checked = false;
            });
        }
    });
    $("tr").on("dblclick", function (e) {
        var id = e.currentTarget.id
        var checked = $('#checkItem_' + id).is(':checked');
        if(checked) {
            $('#checkItem_' + id).prop('checked', false);

        }else {
            $('#checkItem_' + id).prop('checked', true);
        }
    });
    function InitDragDropTable() {
        let tableRow = document.querySelector("#@Model.ID");

      var  dragger = tableDragger(document.querySelector('#@Model.ID'), { mode: 'row', dragHandler: '.handle', onlyBody: true })
            .on('drag', () => {
                console.log('drag');
                $("tr").addClass("sindu_handle");
            })
            .on('drop', (from, to, el, mode) => {

                //console.log("el",el)
                //console.log("mode",mode)
                if (from > to) {
                    var fromId = tableRow.rows[to].id;
                    var toId = tableRow.rows[to + 1].id;
                     @(Html.Raw(Model.ActionMove))(fromId, toId);
                } else if (from < to) {
                    var fromId = tableRow.rows[to].id;
                    var toId = tableRow.rows[to - 1].id;
                    @(Html.Raw(Model.ActionMove))(fromId, toId);
                }
                     console.log("from", from+"|"+fromId)
                console.log("to", to+"|"+toId)

            })
            .on('shadowMove', (from, to, el, mode) => {
            })
            .on('out', (el, mode) => {
                //console.log(`move out or drop ${el.nodeName} in mode ${mode}`);
                //dragger.destroy();
                //dragger = null;
                $("tr").removeClass("sindu_handle");
            });
        $("tr").removeClass("sindu_handle");


    }


</script>